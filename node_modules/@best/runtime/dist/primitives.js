/*
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
import { dispatch } from './state';
import { HOOKS, RUN_BENCHMARK, MODES } from './constants';
const _dispatchDescribe = (nodeName, blockFn, mode) => {
    dispatch({ nodeName, mode, nodeType: 'start_describe_definition' });
    blockFn();
    dispatch({ nodeName, nodeType: 'finish_describe_definition' });
};
const describe = (blockName, blockFn) => _dispatchDescribe(blockName, blockFn);
describe.only = (blockName, blockFn) => _dispatchDescribe(blockName, blockFn, MODES.ONLY);
describe.skip = (blockName, blockFn) => _dispatchDescribe(blockName, blockFn, MODES.SKIP);
const _dispatchBenchmark = (nodeName, blockFn, mode) => {
    dispatch({ nodeName, mode, nodeType: 'start_benchmark_definition' });
    blockFn();
    dispatch({ nodeName, nodeType: 'finish_benchmark_definition' });
};
const benchmark = (benchmarkName, fn) => _dispatchBenchmark(benchmarkName, fn);
benchmark.only = (benchmarkName, fn) => _dispatchBenchmark(benchmarkName, fn, MODES.ONLY);
benchmark.skip = (benchmarkName, fn) => _dispatchBenchmark(benchmarkName, fn, MODES.SKIP);
const _addHook = (fn, hookType) => dispatch({ nodeName: 'hook', fn, hookType, nodeType: 'add_hook' });
const beforeAll = (fn) => _addHook(fn, HOOKS.BEFORE_ALL);
const before = (fn) => _addHook(fn, HOOKS.BEFORE);
const afterAll = (fn) => _addHook(fn, HOOKS.AFTER_ALL);
const after = (fn) => _addHook(fn, HOOKS.AFTER);
const run = (fn) => dispatch({ nodeName: 'run', fn, nodeType: RUN_BENCHMARK });
export { describe, benchmark, beforeAll, before, afterAll, after, run };
//# sourceMappingURL=primitives.js.map