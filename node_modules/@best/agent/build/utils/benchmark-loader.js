"use strict";
/*
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUploaderInstance = getUploaderInstance;
exports.extractBenchmarkTarFile = extractBenchmarkTarFile;
const path_1 = __importDefault(require("path"));
const crypto_1 = require("crypto");
const utils_1 = require("@best/utils");
const tar_1 = require("tar");
const socket_io_file_1 = __importDefault(require("./socket.io-file"));
// This is all part of the initialization
const LOADER_CONFIG_DEFAULTS = {
    accepts: [],
    maxFileSize: 52428800, // 50 mb
    chunkSize: 10240, // 10kb
    transmissionDelay: 0,
    overwrite: true,
};
function getUploaderInstance(socket) {
    // In case multiple agents are connected to the same hub and multiple benchmarks are invoked concurrently,
    // if more than one benchmark has the exact same name, an error could occur because of a race condition.
    // This race condition is triggered when one client is uploading to the hub while the hub is uploading
    // same-named benchmark to the agent. When this happens, the agent may get a partial file or the hub may fail
    // because there is a lock on the same-named file.
    const config = Object.assign({}, LOADER_CONFIG_DEFAULTS, {
        uploadDir: path_1.default.join((0, utils_1.cacheDirectory)('best_agent'), 'uploads', (0, crypto_1.randomBytes)(16).toString('hex')),
    });
    const uploader = new socket_io_file_1.default(socket, config);
    uploader.load = function () {
        return new Promise((resolve, reject) => {
            uploader.on('complete', (info) => {
                uploader.removeAllListeners('complete');
                uploader.removeAllListeners('error');
                resolve(info.uploadDir);
            });
            uploader.on('error', (err) => {
                reject(err);
            });
        });
    };
    return uploader;
}
function extractBenchmarkTarFile(uploadDir) {
    const benchmarkDirname = path_1.default.dirname(uploadDir);
    return (0, tar_1.x)({ cwd: benchmarkDirname, file: uploadDir });
}
//# sourceMappingURL=benchmark-loader.js.map