"use strict";
/*
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RemoteClient = exports.Agent = void 0;
exports.run = run;
const http_1 = __importDefault(require("http"));
const express_1 = __importDefault(require("express"));
const agent_frontend_1 = require("@best/agent-frontend");
const agent_1 = require("../agent");
Object.defineProperty(exports, "Agent", { enumerable: true, get: function () { return agent_1.Agent; } });
Object.defineProperty(exports, "RemoteClient", { enumerable: true, get: function () { return agent_1.RemoteClient; } });
const config_1 = require("./config");
const PORT = process.env.PORT || 5001;
function run() {
    const hubRegistrationConfig = (0, config_1.getRemoteHubConfig)();
    const agentConfig = (0, config_1.getAgentConfig)();
    if (!agentConfig.runner) {
        throw new Error('An agent must have a runner attached to it');
    }
    if (!agentConfig.uri) {
        throw new Error('An agent must have a URI defined');
    }
    const app = (0, express_1.default)();
    (0, agent_frontend_1.serveFrontend)(app);
    const server = http_1.default.createServer(app);
    const agent = new agent_1.Agent(server, agentConfig, hubRegistrationConfig);
    (0, agent_frontend_1.observeAgent)(server, agent);
    server.listen(PORT);
    process.stdout.write(`Best agent listening in port ${PORT}...\n`);
}
//# sourceMappingURL=index.js.map