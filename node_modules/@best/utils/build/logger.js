"use strict";
/*
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = void 0;
const picocolors_1 = __importDefault(require("picocolors"));
const winston_1 = require("winston");
class Logger {
    static customFormat = winston_1.format.printf((logData) => {
        const msg = `${logData.timestamp} | ${logData.level.toUpperCase()} | ${logData.label.toUpperCase()} | ${logData.stack || logData.message}`;
        if (!Logger.showColors) {
            return msg;
        }
        switch (logData.level) {
            case 'warn':
                return picocolors_1.default.yellow(msg);
            case 'error':
                return picocolors_1.default.red(msg);
            default:
                return msg;
        }
    });
    static customTimestampFormat = winston_1.format.timestamp({
        format: 'YYYY-MM-DD HH:mm:ss.SSS',
    });
    static getLogger(configs) {
        /*
         * Do not output the text in color if running in production
         * or if the terminal doesn't support colors.
         */
        Logger.showColors = process.env.NODE_ENV !== 'production' && picocolors_1.default.isColorSupported;
        return (0, winston_1.createLogger)({
            exitOnError: false,
            format: winston_1.format.combine(winston_1.format.label({ label: configs.label }), this.customTimestampFormat, this.customFormat),
            transports: [new winston_1.transports.Console()],
        });
    }
    static showColors = false;
}
exports.Logger = Logger;
//# sourceMappingURL=logger.js.map