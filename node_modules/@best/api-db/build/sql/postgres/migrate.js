"use strict";
/*
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.migrate = void 0;
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const util_1 = require("util");
const asyncReadDir = (0, util_1.promisify)(fs_1.default.readdir);
const buildMigrations = async (location) => {
    const migrationsPath = path_1.default.resolve(__dirname, location);
    const files = await asyncReadDir(migrationsPath);
    // we look for .js files since these will be pre-compiled by js
    const partialMigrations = files
        .map((f) => f.match(/^((\d+).(.*?))\.js$/))
        .reduce((migrations, match) => {
        if (!match) {
            return migrations;
        }
        const migration = { id: Number(match[2]), name: match[3], filename: match[1] };
        return [...migrations, migration];
    }, [])
        .sort((a, b) => Math.sign(a.id - b.id));
    const migrations = await Promise.all(partialMigrations.map(async (partial) => {
        const filename = path_1.default.resolve(migrationsPath, partial.filename);
        const content = await Promise.resolve(`${filename}`).then(s => __importStar(require(s)));
        return {
            ...partial,
            ...content,
        };
    }));
    return migrations;
};
const migrate = async (db, redoLast = false, location = 'migrations/', table = 'migrations') => {
    const migrations = await buildMigrations(location);
    const client = await db.connect();
    await client.query(`CREATE TABLE IF NOT EXISTS "${table}" (id INTEGER PRIMARY KEY, name TEXT NOT NULL, up TEXT NOT NULL, down TEXT NOT NULL)`);
    const previous = await client.query(`SELECT * FROM ${table} ORDER BY id ASC`);
    let lastMigration = previous.rows[previous.rows.length - 1];
    if (redoLast && previous.rows.length > 0) {
        await client.query('BEGIN');
        try {
            await client.query(lastMigration.down);
            await client.query(`DELETE FROM "${table}" WHERE id = ?`, lastMigration.id);
            await client.query('COMMIT');
            lastMigration = null;
        }
        catch (err) {
            await client.query('ROLLBACK');
            client.release();
            throw err;
        }
    }
    const lastMigrationId = lastMigration ? lastMigration.id : 0;
    await Promise.all(migrations.map(async (migration) => {
        if (migration.id > lastMigrationId) {
            await client.query('BEGIN');
            try {
                await client.query(migration.up);
                await client.query(`INSERT INTO "${table}" (id, name, up, down) VALUES ($1, $2, $3, $4)`, [
                    migration.id,
                    migration.name,
                    migration.up,
                    migration.down,
                ]);
                await client.query('COMMIT');
            }
            catch (err) {
                await client.query('ROLLBACK');
                client.release();
                throw err;
            }
        }
    }));
    client.release();
    return true;
};
exports.migrate = migrate;
//# sourceMappingURL=migrate.js.map