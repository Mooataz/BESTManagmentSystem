"use strict";
/*
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.saveBenchmarkSummaryInDB = void 0;
const crypto_1 = __importDefault(require("crypto"));
const utils_1 = require("./utils");
function md5(data) {
    return crypto_1.default.createHash('md5').update(data).digest('hex');
}
const generateSnapshots = (runSettings, benchmarks, groupName) => {
    return benchmarks.reduce((results, benchmark) => {
        if (benchmark.type === 'benchmark') {
            const metrics = Object.keys(benchmark.metrics).reduce((results, metricName) => {
                const values = benchmark.metrics[metricName];
                if (values) {
                    return [
                        ...results,
                        {
                            name: metricName,
                            duration: values.stats.median,
                            stdDeviation: Math.sqrt(values.stats.variance),
                        },
                    ];
                }
                return results;
            }, []);
            const snapshot = {
                ...runSettings,
                name: `${groupName ? groupName + '/' : ''}${benchmark.name}`,
                metrics: metrics,
            };
            return [...results, snapshot];
        }
        else if (benchmark.type === 'group') {
            return [...results, ...generateSnapshots(runSettings, benchmark.nodes, benchmark.name)];
        }
        return results;
    }, []);
};
const saveBenchmarkSummaryInDB = async (benchmarkResults, globalConfig) => {
    const db = (0, utils_1.loadDbFromConfig)(globalConfig);
    await db.migrate();
    return Promise.all(benchmarkResults.map(async (benchmarkResult) => {
        const { benchmarkInfo: { benchmarkSignature }, projectConfig, environment, stats, } = benchmarkResult;
        const { projectName } = projectConfig;
        const { lastCommit, branch } = globalConfig.gitInfo;
        const snapshotEnvironment = {
            hardware: environment.hardware,
            browser: environment.browser,
        };
        const environmentHash = md5(JSON.stringify(snapshotEnvironment));
        const runSettings = {
            similarityHash: benchmarkSignature,
            commit: lastCommit.hash,
            commitDate: lastCommit.date,
            environmentHash,
            temporary: branch !== globalConfig.mainBranch,
        };
        if (stats) {
            const snapshots = generateSnapshots(runSettings, stats.results);
            return db.saveSnapshots(snapshots, projectName);
        }
        else {
            return false;
        }
    }));
};
exports.saveBenchmarkSummaryInDB = saveBenchmarkSummaryInDB;
//# sourceMappingURL=store.js.map