"use strict";
/*
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGitInfo = getGitInfo;
const simple_git_1 = require("simple-git");
async function getCurrentHashAndDate(git) {
    const { latest } = await git.log();
    const date = latest.date;
    const hash = latest.hash.slice(0, 7);
    return { hash, date };
}
async function hasLocalChanges(git) {
    const diff = await git.diffSummary();
    return diff.files && diff.files.length > 0;
}
function getBranch(git) {
    return git.revparse(['--abbrev-ref', 'HEAD']);
}
async function getRepository(git) {
    const url = await git.listRemote(['--get-url']);
    const matches = url.trim().match(/^.+[:/](.+)\/(.+)/);
    if (!matches) {
        throw new Error('Unable to parse git repo');
    }
    const [, owner, repo] = matches;
    return { owner, repo };
}
async function getGitInfo(baseDir) {
    const git = (0, simple_git_1.simpleGit)(baseDir);
    const isRepo = await git.checkIsRepo();
    if (isRepo) {
        const [lastCommit, localChanges, branch, repo] = await Promise.all([
            getCurrentHashAndDate(git),
            hasLocalChanges(git),
            getBranch(git),
            getRepository(git),
        ]);
        return { lastCommit, localChanges, branch, repo };
    }
}
//# sourceMappingURL=git.js.map