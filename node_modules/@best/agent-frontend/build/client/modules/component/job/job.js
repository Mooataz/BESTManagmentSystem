"use strict";
var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
        var context = {};
        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        }
        else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
};
var __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
};
Object.defineProperty(exports, "__esModule", { value: true });
const lwc_1 = require("lwc");
function normalizeTime(sec_num) {
    let minutes = Math.floor(sec_num / 60);
    let seconds = sec_num - minutes * 60;
    if (minutes > 99) {
        return '99:99';
    }
    if (minutes < 10) {
        minutes = '0' + minutes;
    }
    if (seconds < 10) {
        seconds = '0' + seconds;
    }
    return minutes + ':' + seconds;
}
function calculateProgress(executedIterations, executedTime, iterations, maxDuration, minSampleCount) {
    const avgIteration = executedTime / executedIterations;
    const runtime = parseInt(executedTime / 1000 + '', 10);
    let estimated;
    if (iterations) {
        estimated = Math.round((iterations * avgIteration) / 1000) + 1;
    }
    else if (avgIteration * minSampleCount > maxDuration) {
        estimated = Math.round((minSampleCount * avgIteration) / 1000) + 1;
    }
    else {
        estimated = maxDuration / 1000;
    }
    return {
        executedIterations,
        estimated: normalizeTime(estimated),
        runtime: normalizeTime(runtime),
        avgIteration,
        percentage: Math.round((runtime * 100) / estimated),
    };
}
let ComponentJob = (() => {
    let _classSuper = lwc_1.LightningElement;
    let _benchmarkId_decorators;
    let _benchmarkId_initializers = [];
    let _benchmarkId_extraInitializers = [];
    let _clientId_decorators;
    let _clientId_initializers = [];
    let _clientId_extraInitializers = [];
    let _agentId_decorators;
    let _agentId_initializers = [];
    let _agentId_extraInitializers = [];
    let _executedTime_decorators;
    let _executedTime_initializers = [];
    let _executedTime_extraInitializers = [];
    let _executedIterations_decorators;
    let _executedIterations_initializers = [];
    let _executedIterations_extraInitializers = [];
    let _iterations_decorators;
    let _iterations_initializers = [];
    let _iterations_extraInitializers = [];
    let _maxDuration_decorators;
    let _maxDuration_initializers = [];
    let _maxDuration_extraInitializers = [];
    let _minSampleCount_decorators;
    let _minSampleCount_initializers = [];
    let _minSampleCount_extraInitializers = [];
    return class ComponentJob extends _classSuper {
        static {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
            _benchmarkId_decorators = [lwc_1.api];
            _clientId_decorators = [lwc_1.api];
            _agentId_decorators = [lwc_1.api];
            _executedTime_decorators = [lwc_1.api];
            _executedIterations_decorators = [lwc_1.api];
            _iterations_decorators = [lwc_1.api];
            _maxDuration_decorators = [lwc_1.api];
            _minSampleCount_decorators = [lwc_1.api];
            __esDecorate(null, null, _benchmarkId_decorators, { kind: "field", name: "benchmarkId", static: false, private: false, access: { has: obj => "benchmarkId" in obj, get: obj => obj.benchmarkId, set: (obj, value) => { obj.benchmarkId = value; } }, metadata: _metadata }, _benchmarkId_initializers, _benchmarkId_extraInitializers);
            __esDecorate(null, null, _clientId_decorators, { kind: "field", name: "clientId", static: false, private: false, access: { has: obj => "clientId" in obj, get: obj => obj.clientId, set: (obj, value) => { obj.clientId = value; } }, metadata: _metadata }, _clientId_initializers, _clientId_extraInitializers);
            __esDecorate(null, null, _agentId_decorators, { kind: "field", name: "agentId", static: false, private: false, access: { has: obj => "agentId" in obj, get: obj => obj.agentId, set: (obj, value) => { obj.agentId = value; } }, metadata: _metadata }, _agentId_initializers, _agentId_extraInitializers);
            __esDecorate(null, null, _executedTime_decorators, { kind: "field", name: "executedTime", static: false, private: false, access: { has: obj => "executedTime" in obj, get: obj => obj.executedTime, set: (obj, value) => { obj.executedTime = value; } }, metadata: _metadata }, _executedTime_initializers, _executedTime_extraInitializers);
            __esDecorate(null, null, _executedIterations_decorators, { kind: "field", name: "executedIterations", static: false, private: false, access: { has: obj => "executedIterations" in obj, get: obj => obj.executedIterations, set: (obj, value) => { obj.executedIterations = value; } }, metadata: _metadata }, _executedIterations_initializers, _executedIterations_extraInitializers);
            __esDecorate(null, null, _iterations_decorators, { kind: "field", name: "iterations", static: false, private: false, access: { has: obj => "iterations" in obj, get: obj => obj.iterations, set: (obj, value) => { obj.iterations = value; } }, metadata: _metadata }, _iterations_initializers, _iterations_extraInitializers);
            __esDecorate(null, null, _maxDuration_decorators, { kind: "field", name: "maxDuration", static: false, private: false, access: { has: obj => "maxDuration" in obj, get: obj => obj.maxDuration, set: (obj, value) => { obj.maxDuration = value; } }, metadata: _metadata }, _maxDuration_initializers, _maxDuration_extraInitializers);
            __esDecorate(null, null, _minSampleCount_decorators, { kind: "field", name: "minSampleCount", static: false, private: false, access: { has: obj => "minSampleCount" in obj, get: obj => obj.minSampleCount, set: (obj, value) => { obj.minSampleCount = value; } }, metadata: _metadata }, _minSampleCount_initializers, _minSampleCount_extraInitializers);
            if (_metadata) Object.defineProperty(this, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        }
        benchmarkId = __runInitializers(this, _benchmarkId_initializers, void 0);
        clientId = (__runInitializers(this, _benchmarkId_extraInitializers), __runInitializers(this, _clientId_initializers, void 0));
        agentId = (__runInitializers(this, _clientId_extraInitializers), __runInitializers(this, _agentId_initializers, void 0));
        executedTime = (__runInitializers(this, _agentId_extraInitializers), __runInitializers(this, _executedTime_initializers, 0));
        executedIterations = (__runInitializers(this, _executedTime_extraInitializers), __runInitializers(this, _executedIterations_initializers, 0));
        iterations = (__runInitializers(this, _executedIterations_extraInitializers), __runInitializers(this, _iterations_initializers, 0));
        maxDuration = (__runInitializers(this, _iterations_extraInitializers), __runInitializers(this, _maxDuration_initializers, 0));
        minSampleCount = (__runInitializers(this, _maxDuration_extraInitializers), __runInitializers(this, _minSampleCount_initializers, 0));
        get isRunning() {
            return true;
        }
        get progress() {
            return calculateProgress(this.executedIterations, this.executedTime, this.iterations, this.maxDuration, this.minSampleCount);
        }
        get hasEstimate() {
            return false;
        }
        constructor() {
            super(...arguments);
            __runInitializers(this, _minSampleCount_extraInitializers);
        }
    };
})();
exports.default = ComponentJob;
//# sourceMappingURL=job.js.map