"use strict";
/*
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildBenchmark = buildBenchmark;
const fs_1 = __importDefault(require("fs"));
const rollup_1 = require("rollup");
const path_1 = __importDefault(require("path"));
const crypto_1 = __importDefault(require("crypto"));
const mkdirp_1 = require("mkdirp");
const rollup_plugin_benchmark_import_1 = __importDefault(require("./rollup-plugin-benchmark-import"));
const html_templating_1 = __importDefault(require("./html-templating"));
const utils_1 = require("@best/utils");
const BASE_ROLLUP_OUTPUT = {
    format: 'iife',
    manualChunks: function () {
        /* guarantee one chunk */ return 'main_chunk';
    },
};
const ROLLUP_CACHE = new Map();
function md5(data) {
    return crypto_1.default.createHash('md5').update(data).digest('hex');
}
function addResolverPlugins(plugins) {
    if (!plugins) {
        return [];
    }
    return plugins.map((plugin) => {
        if (typeof plugin === 'string') {
            return (0, utils_1.req)(plugin)();
        }
        else if (Array.isArray(plugin)) {
            return (0, utils_1.req)(plugin[0])(plugin[1]);
        }
        else {
            throw new Error('Invalid plugin config');
        }
    });
}
async function buildBenchmark(entry, projectConfig, globalConfig, buildLogStream) {
    buildLogStream.onBenchmarkBuildStart(entry);
    const { gitInfo: { lastCommit: { hash: gitHash }, localChanges, }, } = globalConfig;
    const { projectName, benchmarkOutput } = projectConfig;
    const ext = path_1.default.extname(entry);
    const benchmarkName = path_1.default.basename(entry, ext);
    const benchmarkJSFileName = benchmarkName + ext;
    const benchmarkProjectFolder = path_1.default.join(benchmarkOutput, projectName);
    buildLogStream.log('Bundling benchmark files...');
    const bundle = await (0, rollup_1.rollup)({
        input: entry,
        plugins: [(0, rollup_plugin_benchmark_import_1.default)(), ...addResolverPlugins(projectConfig.plugins)],
        cache: ROLLUP_CACHE.get(projectName),
        onwarn(warning, warn) {
            // Make compilation fail, if any bare module can't be resolved.
            if (typeof warning === 'object' && warning.code === 'UNRESOLVED_IMPORT') {
                throw new Error(warning.message);
            }
            warn(warning);
        },
    });
    ROLLUP_CACHE.set(projectName, bundle.cache);
    buildLogStream.log('Generating benchmark artifacts...');
    const { output } = await bundle.generate(BASE_ROLLUP_OUTPUT);
    const benchmarkSource = output[0].code; // We don't do code splitting so the first one will be the one we want
    // Benchmark artifacts vars
    const benchmarkSignature = md5(benchmarkSource);
    const benchmarkSnapshotName = localChanges
        ? `${benchmarkName}_local_${benchmarkSignature.slice(0, 10)}`
        : `${benchmarkName}_${gitHash}`;
    const benchmarkFolder = path_1.default.join(benchmarkProjectFolder, benchmarkSnapshotName);
    const benchmarkArtifactsFolder = path_1.default.join(benchmarkFolder, 'artifacts');
    const benchmarkEntry = path_1.default.join(benchmarkArtifactsFolder, `${benchmarkName}.html`);
    const htmlTemplate = (0, html_templating_1.default)({ benchmarkName, benchmarkJs: `./${benchmarkJSFileName}` });
    mkdirp_1.mkdirp.sync(benchmarkArtifactsFolder);
    fs_1.default.writeFileSync(benchmarkEntry, htmlTemplate, 'utf-8');
    fs_1.default.writeFileSync(path_1.default.join(benchmarkArtifactsFolder, benchmarkJSFileName), benchmarkSource, 'utf-8');
    buildLogStream.onBenchmarkBuildEnd(entry);
    return {
        benchmarkName,
        benchmarkFolder,
        benchmarkEntry,
        benchmarkSignature,
        projectConfig,
        globalConfig,
    };
}
//# sourceMappingURL=build-benchmark.js.map