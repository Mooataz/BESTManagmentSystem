"use client";
import {
  Sheet_default,
  getSheetUtilityClass,
  sheetClasses_default
} from "./chunk-2AVLV7OJ.js";
import {
  Stack_default,
  getStackUtilityClass,
  stackClasses_default
} from "./chunk-WRIAFV5C.js";
import {
  Switch_default
} from "./chunk-QRSYMKIR.js";
import {
  Textarea_default,
  getTextareaUtilityClass,
  textareaClasses_default
} from "./chunk-BXW6BDJQ.js";
import {
  Table_default,
  getTableUtilityClass,
  tableClasses_default
} from "./chunk-TFZW7RN4.js";
import {
  Tooltip_default,
  getTooltipUtilityClass,
  tooltipClasses_default
} from "./chunk-OASNJGB5.js";
import "./chunk-XBSOS2R6.js";
import {
  Menu_default,
  getMenuUtilityClass,
  menuClasses_default
} from "./chunk-HHDK6BSW.js";
import {
  MenuButton_default,
  getMenuButtonUtilityClass,
  menuButtonClasses_default
} from "./chunk-VCDG3MNV.js";
import {
  ModalDialog_default
} from "./chunk-UM2TLSG4.js";
import {
  CloseModalContext_default,
  Modal_default,
  StyledModalBackdrop,
  StyledModalRoot,
  getModalUtilityClass,
  modalClasses_default
} from "./chunk-7LVEMXBI.js";
import {
  MenuItem_default,
  getMenuItemUtilityClass,
  menuItemClasses_default
} from "./chunk-UEXQLF5G.js";
import {
  RadioGroup_default,
  getRadioGroupUtilityClass,
  radioGroupClasses_default
} from "./chunk-OCCIUBYX.js";
import {
  Radio_default,
  getRadioUtilityClass,
  radioClasses_default
} from "./chunk-7KTCZBAA.js";
import {
  Select_default,
  getSelectUtilityClass,
  selectClasses_default
} from "./chunk-UAAQTGPS.js";
import "./chunk-QUORQGCT.js";
import {
  Link_default,
  getLinkUtilityClass,
  linkClasses_default
} from "./chunk-IVHOXLXR.js";
import {
  ListDivider_default,
  getListDividerUtilityClass,
  listDividerClasses_default
} from "./chunk-6OIGGXFZ.js";
import "./chunk-BU7AEATX.js";
import {
  ListItemContent_default,
  getListItemContentUtilityClass,
  listItemContentClasses_default
} from "./chunk-UZQURGPO.js";
import {
  ListItemDecorator_default,
  getListItemDecoratorUtilityClass,
  listItemDecoratorClasses_default
} from "./chunk-IW5RL74N.js";
import {
  DialogActions_default,
  dialogActionsClasses_default,
  getDialogActionsUtilityClass
} from "./chunk-DFPKLPNN.js";
import {
  DialogContent_default,
  dialogContentClasses_default,
  getDialogContentUtilityClass
} from "./chunk-FBMWBDXF.js";
import {
  DialogTitle_default
} from "./chunk-OOIYGJ6C.js";
import {
  ModalDialogSizeContext_default
} from "./chunk-PSAFODSR.js";
import {
  dialogTitleClasses_default,
  getDialogTitleUtilityClass
} from "./chunk-6SAHYHGD.js";
import {
  ModalDialogVariantColorContext_default
} from "./chunk-VQ2HAIFN.js";
import "./chunk-AXVWXL5Q.js";
import {
  Divider_default
} from "./chunk-HEY7CB6T.js";
import "./chunk-GJO4AAOM.js";
import {
  FormControl_default,
  formControlClasses_default,
  getFormControlUtilityClass
} from "./chunk-7BOD73LG.js";
import {
  getSwitchUtilityClass,
  switchClasses_default
} from "./chunk-SEZKMHLF.js";
import {
  FormLabel_default,
  formLabelClasses_default,
  getFormLabelUtilityClass
} from "./chunk-K777AE2A.js";
import "./chunk-PNOGJW63.js";
import "./chunk-AEH5OTC7.js";
import {
  CardActions_default,
  cardActionsClasses_default,
  getCardActionsUtilityClass
} from "./chunk-CMGMVV2D.js";
import {
  dividerClasses_default,
  getDividerUtilityClass
} from "./chunk-JON6KTZT.js";
import "./chunk-ASEOTSHR.js";
import {
  Card_default
} from "./chunk-V53Q62OR.js";
import "./chunk-FOI6MO7Z.js";
import "./chunk-TNNYWLP4.js";
import {
  CardContent_default,
  cardContentClasses_default,
  getCardContentUtilityClass
} from "./chunk-ZH6QWWAU.js";
import {
  CardCover_default,
  cardCoverClasses_default,
  getCardCoverUtilityClass
} from "./chunk-BKJ2KIJ7.js";
import {
  Checkbox_default,
  checkboxClasses_default,
  getCheckboxUtilityClass
} from "./chunk-DT2XDRZV.js";
import {
  TypographyInheritContext,
  Typography_default,
  getTypographyUtilityClass,
  typographyClasses_default
} from "./chunk-LYLPELS2.js";
import {
  CardOverflow_default
} from "./chunk-P3ZYKKH7.js";
import {
  getModalDialogUtilityClass,
  modalDialogClasses_default
} from "./chunk-XO25QI27.js";
import {
  cardClasses_default,
  getCardUtilityClass
} from "./chunk-LJO4BIWP.js";
import {
  cardOverflowClasses_default,
  getCardOverflowUtilityClass
} from "./chunk-IANTOC3M.js";
import {
  CssBaseline_default,
  GlobalStyles_default
} from "./chunk-HKMA3PJJ.js";
import {
  AspectRatio_default,
  aspectRatioClasses_default,
  getAspectRatioUtilityClass
} from "./chunk-JPAEUXNB.js";
import {
  AccordionSummary_default,
  accordionSummaryClasses_default,
  getAccordionSummaryUtilityClass
} from "./chunk-FSXQGORM.js";
import {
  Box_default,
  boxClasses_default
} from "./chunk-MHX3SKMS.js";
import {
  AutocompleteListbox_default,
  AutocompleteOption_default,
  Autocomplete_default,
  ChipDelete_default,
  Close_default,
  ListSubheader_default,
  autocompleteClasses_default,
  autocompleteListboxClasses_default,
  autocompleteOptionClasses_default,
  chipDeleteClasses_default,
  getAutocompleteListboxUtilityClass,
  getAutocompleteOptionUtilityClass,
  getAutocompleteUtilityClass,
  getChipDeleteUtilityClass,
  getListSubheaderUtilityClass,
  listSubheaderClasses_default
} from "./chunk-KAKGKF3W.js";
import {
  Input_default,
  getInputUtilityClass,
  inputClasses_default
} from "./chunk-MSNKRYUB.js";
import "./chunk-TWVAZKX6.js";
import "./chunk-AZ5CW7KT.js";
import {
  ListProvider_default,
  List_default,
  StyledList,
  getListUtilityClass,
  listClasses_default,
  scopedVariables
} from "./chunk-XWQ2TDUP.js";
import "./chunk-AFDXUFEJ.js";
import "./chunk-MZTHJLKE.js";
import {
  IconButton_default,
  StyledIconButton
} from "./chunk-3CCOHTH3.js";
import {
  applySoftInversion,
  applySolidInversion
} from "./chunk-5FSYVHQX.js";
import {
  FormControlContext_default
} from "./chunk-L7SN6OCO.js";
import {
  Chip_default,
  chipClasses_default,
  getChipUtilityClass
} from "./chunk-BCLTLEPC.js";
import {
  useVariantColor
} from "./chunk-REA6UIJZ.js";
import {
  ListItemButton_default,
  StyledListItemButton,
  getListItemButtonUtilityClass,
  listItemButtonClasses_default
} from "./chunk-H23YP7GN.js";
import {
  ListItemButtonOrientationContext_default
} from "./chunk-ZYMKJAGW.js";
import {
  AvatarGroup_default,
  Avatar_default,
  avatarClasses_default,
  avatarGroupClasses_default,
  getAvatarGroupUtilityClass,
  getAvatarUtilityClass
} from "./chunk-N3NOYN6D.js";
import {
  SvgIcon_default,
  getSvgIconUtilityClass,
  svgIconClasses_default
} from "./chunk-5IXLC5ZB.js";
import "./chunk-4J23OOB2.js";
import {
  Button_default
} from "./chunk-6SDDJOJH.js";
import {
  CircularProgress_default,
  ToggleButtonGroupContext_default,
  circularProgressClasses_default,
  getCircularProgressUtilityClass
} from "./chunk-JNDA5IAV.js";
import {
  ButtonGroup_default,
  StyledButtonGroup,
  buttonGroupClasses_default,
  getButtonGroupUtilityClass
} from "./chunk-X5262HLD.js";
import {
  getIconButtonUtilityClass,
  iconButtonClasses_default
} from "./chunk-DGEG3SFU.js";
import {
  resolveSxValue
} from "./chunk-SU6M33N5.js";
import {
  buttonClasses_default,
  getButtonUtilityClass
} from "./chunk-7PT5PUZ2.js";
import {
  ButtonGroupContext_default
} from "./chunk-OWBS6IMB.js";
import {
  AccordionDetails_default
} from "./chunk-3647T7O5.js";
import {
  Accordion_default,
  accordionClasses_default,
  getAccordionUtilityClass
} from "./chunk-NHUTMYDB.js";
import {
  ListItem_default
} from "./chunk-Z6EGLJ5M.js";
import {
  GroupListContext_default
} from "./chunk-HZRQARQ3.js";
import "./chunk-MYC2BYR4.js";
import {
  getListItemUtilityClass,
  listItemClasses_default
} from "./chunk-H5EFSY7D.js";
import {
  RowListContext_default
} from "./chunk-KTNYI3HS.js";
import {
  accordionDetailsClasses_default,
  getAccordionDetailsUtilityClass
} from "./chunk-GHQXOQNF.js";
import "./chunk-33N5G7MK.js";
import {
  CssVarsProvider,
  ThemeProvider,
  getInitColorSchemeScript,
  useColorScheme,
  useTheme
} from "./chunk-AOECGDFE.js";
import {
  ClickAwayListener,
  TabsListProvider,
  TabsProvider,
  createFilterOptions,
  useOption,
  useOptionContextStabilizer,
  useSlider,
  useSnackbar,
  useTab,
  useTabPanel,
  useTabs,
  useTabsContext,
  useTabsList,
  valueToPercent
} from "./chunk-KJ2ONKSM.js";
import "./chunk-R3DI5JL7.js";
import "./chunk-OBNOATLE.js";
import {
  MenuProvider,
  useMenu
} from "./chunk-SJWXZ4OV.js";
import "./chunk-ZPQ4Y73R.js";
import {
  FocusTrap,
  useModal
} from "./chunk-N4CIN7VR.js";
import {
  Portal
} from "./chunk-CGB6MNJ2.js";
import "./chunk-644U7D5G.js";
import "./chunk-4ISPPWEU.js";
import {
  ListActionTypes,
  ListContext
} from "./chunk-DSTSETPD.js";
import "./chunk-XF4W6AB2.js";
import "./chunk-HT5JPXVG.js";
import {
  Dropdown
} from "./chunk-AJAS7EXL.js";
import "./chunk-YUFSD5RJ.js";
import {
  useButton
} from "./chunk-3LAD5AUA.js";
import {
  useSlot
} from "./chunk-BEGDDUHQ.js";
import {
  styled_default,
  useThemeProps
} from "./chunk-BVQMFEXV.js";
import {
  StyledEngineProvider,
  colors_default,
  createContainer,
  createGetCssVar2 as createGetCssVar,
  createGrid,
  extendTheme,
  generateUtilityClass as generateUtilityClass2,
  generateUtilityClasses as generateUtilityClasses2,
  getPath,
  identifier_default,
  shouldSkipGeneratingVar
} from "./chunk-A5S65SI7.js";
import {
  HTMLElementType,
  capitalize,
  composeClasses,
  generateUtilityClass,
  generateUtilityClasses,
  isHostComponent_default,
  isMuiElement,
  refType_default,
  useForkRef,
  useId,
  usePreviousProps_default
} from "./chunk-5T7C7CFN.js";
import {
  _objectWithoutPropertiesLoose
} from "./chunk-BFL632LT.js";
import {
  css,
  keyframes
} from "./chunk-IECHFFHR.js";
import {
  _extends,
  clsx_default,
  require_prop_types
} from "./chunk-STZI2IHM.js";
import {
  require_jsx_runtime
} from "./chunk-JNNNAK6O.js";
import {
  require_react
} from "./chunk-HSUUC2QV.js";
import {
  __toESM
} from "./chunk-DC5AMYBS.js";

// node_modules/@mui/joy/AccordionGroup/AccordionGroup.js
var React = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());

// node_modules/@mui/joy/AccordionGroup/accordionGroupClasses.js
function getAccordionGroupUtilityClass(slot) {
  return generateUtilityClass2("MuiAccordionGroup", slot);
}
var accordionGroupClasses = generateUtilityClasses2("MuiAccordionGroup", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "sizeSm", "sizeMd", "sizeLg"]);
var accordionGroupClasses_default = accordionGroupClasses;

// node_modules/@mui/joy/AccordionGroup/AccordionGroup.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var _excluded = ["component", "color", "children", "disableDivider", "variant", "transition", "size", "slots", "slotProps"];
var useUtilityClasses = (ownerState) => {
  const {
    variant,
    color,
    size
  } = ownerState;
  const slots = {
    root: ["root", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`]
  };
  return composeClasses(slots, getAccordionGroupUtilityClass, {});
};
var AccordionGroupRoot = styled_default(StyledList, {
  name: "JoyAccordionGroup",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  let transition = {};
  if (ownerState.transition) {
    if (typeof ownerState.transition === "string") {
      transition = {
        "--AccordionDetails-transition": `grid-template-rows ${ownerState.transition}, padding-block ${ownerState.transition}`
      };
    }
    if (typeof ownerState.transition === "object") {
      transition = {
        "--AccordionDetails-transition": `grid-template-rows ${ownerState.transition.initial}, padding-block ${ownerState.transition.initial}`,
        [`& .${accordionDetailsClasses_default.root}.${accordionDetailsClasses_default.expanded}`]: {
          "--AccordionDetails-transition": `grid-template-rows ${ownerState.transition.expanded}, padding-block ${ownerState.transition.expanded}`
        }
      };
    }
  }
  return _extends({
    "--List-padding": "0px",
    "--ListDivider-gap": "0px"
  }, transition, !ownerState.disableDivider && {
    [`& .${accordionClasses_default.root}:not([data-last-child])`]: {
      "--Accordion-borderBottom": `1px solid ${theme.vars.palette.divider}`
    }
  });
});
var AccordionGroup = React.forwardRef(function AccordionGroup2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyAccordionGroup"
  });
  const {
    component = "div",
    color = "neutral",
    children,
    disableDivider = false,
    variant = "plain",
    transition = "0.2s ease",
    size = "md",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const ownerState = _extends({}, props, {
    component,
    color,
    disableDivider,
    variant,
    transition,
    size
  });
  const classes = useUtilityClasses(ownerState);
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: classes.root,
    elementType: AccordionGroupRoot,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime.jsx)(SlotRoot, _extends({}, rootProps, {
    children: (0, import_jsx_runtime.jsx)(ListProvider_default, {
      children
    })
  }));
});
true ? AccordionGroup.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Used to render icon or text elements inside the AccordionGroup if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types.default.elementType,
  /**
   * If `true`, the divider between accordions will be hidden.
   * @default false
   */
  disableDivider: import_prop_types.default.bool,
  /**
   * The size of the component (affect other nested list* components).
   * @default 'md'
   */
  size: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["sm", "md", "lg"]), import_prop_types.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types.default.shape({
    root: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types.default.shape({
    root: import_prop_types.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
  /**
   * The CSS transition for the Accordion details.
   * @default '0.2s ease'
   */
  transition: import_prop_types.default.oneOfType([import_prop_types.default.shape({
    expanded: import_prop_types.default.string.isRequired,
    initial: import_prop_types.default.string.isRequired
  }), import_prop_types.default.string]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types.default.string])
} : void 0;
var AccordionGroup_default = AccordionGroup;

// node_modules/@mui/joy/Alert/Alert.js
var React2 = __toESM(require_react());
var import_prop_types2 = __toESM(require_prop_types());

// node_modules/@mui/joy/Alert/alertClasses.js
function getAlertUtilityClass(slot) {
  return generateUtilityClass2("MuiAlert", slot);
}
var alertClasses = generateUtilityClasses2("MuiAlert", ["root", "startDecorator", "endDecorator", "colorPrimary", "colorDanger", "colorNeutral", "colorSuccess", "colorWarning", "colorContext", "sizeSm", "sizeMd", "sizeLg", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var alertClasses_default = alertClasses;

// node_modules/@mui/joy/Alert/Alert.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var _excluded2 = ["children", "className", "color", "invertedColors", "role", "variant", "size", "startDecorator", "endDecorator", "component", "slots", "slotProps"];
var useUtilityClasses2 = (ownerState) => {
  const {
    variant,
    color,
    size
  } = ownerState;
  const slots = {
    root: ["root", size && `size${capitalize(size)}`, color && `color${capitalize(color)}`, variant && `variant${capitalize(variant)}`],
    startDecorator: ["startDecorator"],
    endDecorator: ["endDecorator"]
  };
  return composeClasses(slots, getAlertUtilityClass, {});
};
var AlertRoot = styled_default("div", {
  name: "JoyAlert",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants;
  const {
    p,
    padding,
    borderRadius
  } = resolveSxValue({
    theme,
    ownerState
  }, ["p", "padding", "borderRadius"]);
  return [_extends({
    "--Alert-radius": theme.vars.radius.sm,
    "--Alert-decoratorChildRadius": "max((var(--Alert-radius) - var(--variant-borderWidth, 0px)) - var(--Alert-padding), min(var(--Alert-padding) + var(--variant-borderWidth, 0px), var(--Alert-radius) / 2))",
    "--Button-minHeight": "var(--Alert-decoratorChildHeight)",
    "--IconButton-size": "var(--Alert-decoratorChildHeight)",
    "--Button-radius": "var(--Alert-decoratorChildRadius)",
    "--IconButton-radius": "var(--Alert-decoratorChildRadius)",
    "--Icon-color": "currentColor"
  }, ownerState.size === "sm" && {
    "--Alert-padding": "0.5rem",
    "--Alert-decoratorChildHeight": "1.5rem",
    "--Icon-fontSize": theme.vars.fontSize.xl,
    gap: "0.5rem"
  }, ownerState.size === "md" && {
    "--Alert-padding": "0.75rem",
    "--Alert-decoratorChildHeight": "2rem",
    "--Icon-fontSize": theme.vars.fontSize.xl,
    gap: "0.625rem"
  }, ownerState.size === "lg" && {
    "--Alert-padding": "1rem",
    "--Alert-decoratorChildHeight": "2.375rem",
    "--Icon-fontSize": theme.vars.fontSize.xl2,
    gap: "0.875rem"
  }, {
    backgroundColor: theme.vars.palette.background.surface,
    display: "flex",
    position: "relative",
    alignItems: "center",
    padding: `var(--Alert-padding)`,
    borderRadius: "var(--Alert-radius)"
  }, theme.typography[`body-${{
    sm: "xs",
    md: "sm",
    lg: "md"
  }[ownerState.size]}`], {
    fontWeight: theme.vars.fontWeight.md
  }, ownerState.variant === "solid" && ownerState.color && ownerState.invertedColors && applySolidInversion(ownerState.color)(theme), ownerState.variant === "soft" && ownerState.color && ownerState.invertedColors && applySoftInversion(ownerState.color)(theme), (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color]), p !== void 0 && {
    "--Alert-padding": p
  }, padding !== void 0 && {
    "--Alert-padding": padding
  }, borderRadius !== void 0 && {
    "--Alert-radius": borderRadius
  }];
});
var AlertStartDecorator = styled_default("span", {
  name: "JoyAlert",
  slot: "StartDecorator",
  overridesResolver: (props, styles) => styles.startDecorator
})({
  display: "inherit",
  flex: "none"
});
var AlertEndDecorator = styled_default("span", {
  name: "JoyAlert",
  slot: "EndDecorator",
  overridesResolver: (props, styles) => styles.endDecorator
})({
  display: "inherit",
  flex: "none",
  marginLeft: "auto"
});
var Alert = React2.forwardRef(function Alert2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyAlert"
  });
  const {
    children,
    className,
    color = "neutral",
    invertedColors = false,
    role = "alert",
    variant = "soft",
    size = "md",
    startDecorator,
    endDecorator,
    component,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded2);
  const ownerState = _extends({}, props, {
    color,
    invertedColors,
    variant,
    size
  });
  const classes = useUtilityClasses2(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: AlertRoot,
    externalForwardedProps,
    ownerState,
    additionalProps: {
      role
    }
  });
  const [SlotStartDecorator, startDecoratorProps] = useSlot("startDecorator", {
    className: classes.startDecorator,
    elementType: AlertStartDecorator,
    externalForwardedProps,
    ownerState
  });
  const [SlotEndDecorator, endDecoratorProps] = useSlot("endDecorator", {
    className: classes.endDecorator,
    elementType: AlertEndDecorator,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime3.jsxs)(SlotRoot, _extends({}, rootProps, {
    children: [startDecorator && (0, import_jsx_runtime2.jsx)(SlotStartDecorator, _extends({}, startDecoratorProps, {
      children: startDecorator
    })), children, endDecorator && (0, import_jsx_runtime2.jsx)(SlotEndDecorator, _extends({}, endDecoratorProps, {
      children: endDecorator
    }))]
  }));
});
true ? Alert.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: import_prop_types2.default.node,
  /**
   * @ignore
   */
  className: import_prop_types2.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types2.default.oneOfType([import_prop_types2.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types2.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types2.default.elementType,
  /**
   * Element placed after the children.
   */
  endDecorator: import_prop_types2.default.node,
  /**
   * If `true`, the children with an implicit color prop invert their colors to match the component's variant and color.
   * @default false
   */
  invertedColors: import_prop_types2.default.bool,
  /**
   * The ARIA role attribute of the element.
   * @default 'alert'
   */
  role: import_prop_types2.default.string,
  /**
   * The size of the component.
   * @default 'md'
   */
  size: import_prop_types2.default.oneOfType([import_prop_types2.default.oneOf(["sm", "md", "lg"]), import_prop_types2.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types2.default.shape({
    endDecorator: import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.object]),
    root: import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.object]),
    startDecorator: import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types2.default.shape({
    endDecorator: import_prop_types2.default.elementType,
    root: import_prop_types2.default.elementType,
    startDecorator: import_prop_types2.default.elementType
  }),
  /**
   * Element placed before the children.
   */
  startDecorator: import_prop_types2.default.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types2.default.oneOfType([import_prop_types2.default.arrayOf(import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.object, import_prop_types2.default.bool])), import_prop_types2.default.func, import_prop_types2.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'soft'
   */
  variant: import_prop_types2.default.oneOfType([import_prop_types2.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types2.default.string])
} : void 0;
var Alert_default = Alert;

// node_modules/@mui/joy/Badge/Badge.js
var React3 = __toESM(require_react());
var import_prop_types3 = __toESM(require_prop_types());

// node_modules/@mui/joy/Badge/badgeClasses.js
function getBadgeUtilityClass(slot) {
  return generateUtilityClass2("MuiBadge", slot);
}
var badgeClasses = generateUtilityClasses2("MuiBadge", ["root", "badge", "anchorOriginTopRight", "anchorOriginBottomRight", "anchorOriginTopLeft", "anchorOriginBottomLeft", "colorPrimary", "colorDanger", "colorNeutral", "colorSuccess", "colorWarning", "colorContext", "invisible", "locationInside", "locationOutside", "sizeSm", "sizeMd", "sizeLg", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var badgeClasses_default = badgeClasses;

// node_modules/@mui/joy/Badge/Badge.js
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
var import_jsx_runtime5 = __toESM(require_jsx_runtime());
var _excluded3 = ["anchorOrigin", "badgeInset", "children", "size", "color", "invisible", "max", "badgeContent", "showZero", "variant", "component", "slots", "slotProps"];
var useUtilityClasses3 = (ownerState) => {
  const {
    color,
    variant,
    size,
    anchorOrigin,
    invisible
  } = ownerState;
  const slots = {
    root: ["root"],
    badge: ["badge", invisible && "invisible", anchorOrigin && `anchorOrigin${capitalize(anchorOrigin.vertical)}${capitalize(anchorOrigin.horizontal)}`, variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`]
  };
  return composeClasses(slots, getBadgeUtilityClass, {});
};
var BadgeRoot = styled_default("span", {
  name: "JoyBadge",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => _extends({}, ownerState.size === "sm" && _extends({
  "--Badge-minHeight": "0.5rem"
}, ownerState.badgeContent && {
  "--Badge-minHeight": "1rem"
}, {
  "--Badge-paddingX": "0.25rem"
}), ownerState.size === "md" && _extends({
  "--Badge-minHeight": "0.75rem"
}, ownerState.badgeContent && {
  "--Badge-minHeight": "1.25rem"
}, {
  "--Badge-paddingX": "0.375rem"
}), ownerState.size === "lg" && _extends({
  "--Badge-minHeight": "1rem"
}, ownerState.badgeContent && {
  "--Badge-minHeight": "1.5rem"
}, {
  "--Badge-paddingX": "0.5rem"
}), {
  "--Badge-ringSize": "2px",
  "--Badge-ring": `0 0 0 var(--Badge-ringSize) var(--Badge-ringColor, ${theme.vars.palette.background.surface})`,
  position: "relative",
  display: "inline-flex",
  // For correct alignment with the text.
  verticalAlign: "middle",
  flexShrink: 0
}));
var BadgeBadge = styled_default("span", {
  name: "JoyBadge",
  slot: "Badge",
  overridesResolver: (props, styles) => styles.badge
})(({
  theme,
  ownerState
}) => {
  var _ownerState$anchorOri, _ownerState$anchorOri2, _ownerState$anchorOri3, _ownerState$anchorOri4, _typography$lineHeigh, _theme$variants;
  const inset = {
    top: ownerState.badgeInset,
    left: ownerState.badgeInset,
    bottom: ownerState.badgeInset,
    right: ownerState.badgeInset
  };
  if (typeof ownerState.badgeInset === "string") {
    const insetValues = ownerState.badgeInset.split(" ");
    if (insetValues.length > 1) {
      inset.top = insetValues[0];
      inset.right = insetValues[1];
      if (insetValues.length === 2) {
        inset.bottom = insetValues[0];
        inset.left = insetValues[1];
      }
      if (insetValues.length === 3) {
        inset.left = insetValues[1];
        inset.bottom = insetValues[2];
      }
      if (insetValues.length === 4) {
        inset.bottom = insetValues[2];
        inset.left = insetValues[3];
      }
    }
  }
  const translateY = ((_ownerState$anchorOri = ownerState.anchorOrigin) == null ? void 0 : _ownerState$anchorOri.vertical) === "top" ? "translateY(-50%)" : "translateY(50%)";
  const translateX = ((_ownerState$anchorOri2 = ownerState.anchorOrigin) == null ? void 0 : _ownerState$anchorOri2.horizontal) === "left" ? "translateX(-50%)" : "translateX(50%)";
  const transformOriginY = ((_ownerState$anchorOri3 = ownerState.anchorOrigin) == null ? void 0 : _ownerState$anchorOri3.vertical) === "top" ? "0%" : "100%";
  const transformOriginX = ((_ownerState$anchorOri4 = ownerState.anchorOrigin) == null ? void 0 : _ownerState$anchorOri4.horizontal) === "left" ? "0%" : "100%";
  const typography = theme.typography[`body-${{
    sm: "xs",
    md: "sm",
    lg: "md"
  }[ownerState.size]}`];
  return _extends({
    "--Icon-color": "currentColor",
    "--Icon-fontSize": `calc(1em * ${(_typography$lineHeigh = typography == null ? void 0 : typography.lineHeight) != null ? _typography$lineHeigh : "1"})`,
    display: "inline-flex",
    flexWrap: "wrap",
    justifyContent: "center",
    alignContent: "center",
    alignItems: "center",
    position: "absolute",
    boxSizing: "border-box",
    boxShadow: "var(--Badge-ring)",
    lineHeight: 1,
    padding: "0 calc(var(--Badge-paddingX) - var(--variant-borderWidth, 0px))",
    minHeight: "var(--Badge-minHeight)",
    minWidth: "var(--Badge-minHeight)",
    borderRadius: "var(--Badge-radius, var(--Badge-minHeight))",
    zIndex: theme.vars.zIndex.badge,
    backgroundColor: theme.vars.palette.background.surface,
    [ownerState.anchorOrigin.vertical]: inset[ownerState.anchorOrigin.vertical],
    [ownerState.anchorOrigin.horizontal]: inset[ownerState.anchorOrigin.horizontal],
    transform: `scale(1) ${translateX} ${translateY}`,
    transformOrigin: `${transformOriginX} ${transformOriginY}`,
    [`&.${badgeClasses_default.invisible}`]: {
      transform: `scale(0) ${translateX} ${translateY}`
    }
  }, typography, {
    fontWeight: theme.vars.fontWeight.md
  }, (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color]);
});
var Badge = React3.forwardRef(function Badge2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyBadge"
  });
  const {
    anchorOrigin: anchorOriginProp = {
      vertical: "top",
      horizontal: "right"
    },
    badgeInset: badgeInsetProp = 0,
    children,
    size: sizeProp = "md",
    color: colorProp = "primary",
    invisible: invisibleProp = false,
    max = 99,
    badgeContent: badgeContentProp = "",
    showZero = false,
    variant: variantProp = "solid",
    component,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded3);
  const prevProps = usePreviousProps_default({
    anchorOrigin: anchorOriginProp,
    size: sizeProp,
    badgeInset: badgeInsetProp,
    color: colorProp,
    variant: variantProp
  });
  let invisible = invisibleProp;
  if (invisibleProp === false && (badgeContentProp === 0 && !showZero || badgeContentProp == null)) {
    invisible = true;
  }
  const {
    color = colorProp,
    size = sizeProp,
    anchorOrigin = anchorOriginProp,
    variant = variantProp,
    badgeInset = badgeInsetProp
  } = invisible ? prevProps : props;
  const ownerState = _extends({}, props, {
    anchorOrigin,
    badgeInset,
    variant,
    invisible,
    color,
    size
  });
  const classes = useUtilityClasses3(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  let displayValue = badgeContentProp && Number(badgeContentProp) > max ? `${max}+` : badgeContentProp;
  if (invisible && badgeContentProp === 0) {
    displayValue = "";
  }
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: classes.root,
    elementType: BadgeRoot,
    externalForwardedProps,
    ownerState
  });
  const [SlotBadge, badgeProps] = useSlot("badge", {
    className: classes.badge,
    elementType: BadgeBadge,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime5.jsxs)(SlotRoot, _extends({}, rootProps, {
    children: [children, (0, import_jsx_runtime4.jsx)(SlotBadge, _extends({}, badgeProps, {
      children: displayValue
    }))]
  }));
});
true ? Badge.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The anchor of the badge.
   * @default {
   *   vertical: 'top',
   *   horizontal: 'right',
   * }
   */
  anchorOrigin: import_prop_types3.default.shape({
    horizontal: import_prop_types3.default.oneOf(["left", "right"]).isRequired,
    vertical: import_prop_types3.default.oneOf(["bottom", "top"]).isRequired
  }),
  /**
   * The content rendered within the badge.
   * @default ''
   */
  badgeContent: import_prop_types3.default.node,
  /**
   * The inset of the badge. Support shorthand syntax as described in https://developer.mozilla.org/en-US/docs/Web/CSS/inset.
   * @default 0
   */
  badgeInset: import_prop_types3.default.oneOfType([import_prop_types3.default.number, import_prop_types3.default.string]),
  /**
   * The badge will be added relative to this node.
   */
  children: import_prop_types3.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'primary'
   */
  color: import_prop_types3.default.oneOfType([import_prop_types3.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types3.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types3.default.elementType,
  /**
   * If `true`, the badge is invisible.
   * @default false
   */
  invisible: import_prop_types3.default.bool,
  /**
   * Max count to show.
   * @default 99
   */
  max: import_prop_types3.default.number,
  /**
   * Controls whether the badge is hidden when `badgeContent` is zero.
   * @default false
   */
  showZero: import_prop_types3.default.bool,
  /**
   * The size of the component.
   * @default 'md'
   */
  size: import_prop_types3.default.oneOfType([import_prop_types3.default.oneOf(["sm", "md", "lg"]), import_prop_types3.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types3.default.shape({
    badge: import_prop_types3.default.oneOfType([import_prop_types3.default.func, import_prop_types3.default.object]),
    root: import_prop_types3.default.oneOfType([import_prop_types3.default.func, import_prop_types3.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types3.default.shape({
    badge: import_prop_types3.default.elementType,
    root: import_prop_types3.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types3.default.oneOfType([import_prop_types3.default.arrayOf(import_prop_types3.default.oneOfType([import_prop_types3.default.func, import_prop_types3.default.object, import_prop_types3.default.bool])), import_prop_types3.default.func, import_prop_types3.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'solid'
   */
  variant: import_prop_types3.default.oneOfType([import_prop_types3.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types3.default.string])
} : void 0;
var Badge_default = Badge;

// node_modules/@mui/joy/Breadcrumbs/Breadcrumbs.js
var React4 = __toESM(require_react());
var import_prop_types4 = __toESM(require_prop_types());

// node_modules/@mui/joy/Breadcrumbs/breadcrumbsClasses.js
function getBreadcrumbsUtilityClass(slot) {
  return generateUtilityClass("MuiBreadcrumbs", slot);
}
var breadcrumbsClasses = generateUtilityClasses("MuiBreadcrumbs", ["root", "ol", "li", "separator", "sizeSm", "sizeMd", "sizeLg"]);
var breadcrumbsClasses_default = breadcrumbsClasses;

// node_modules/@mui/joy/Breadcrumbs/Breadcrumbs.js
var import_jsx_runtime6 = __toESM(require_jsx_runtime());
var _excluded4 = ["children", "className", "size", "separator", "component", "slots", "slotProps"];
var useUtilityClasses4 = (ownerState) => {
  const {
    size
  } = ownerState;
  const slots = {
    root: ["root", size && `size${capitalize(size)}`],
    li: ["li"],
    ol: ["ol"],
    separator: ["separator"]
  };
  return composeClasses(slots, getBreadcrumbsUtilityClass, {});
};
var BreadcrumbsRoot = styled_default("nav", {
  name: "JoyBreadcrumbs",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => _extends({}, ownerState.size === "sm" && {
  "--Icon-fontSize": theme.vars.fontSize.lg,
  gap: "var(--Breadcrumbs-gap, 0.25rem)",
  padding: "0.5rem"
}, ownerState.size === "md" && {
  "--Icon-fontSize": theme.vars.fontSize.xl,
  gap: "var(--Breadcrumbs-gap, 0.375rem)",
  padding: "0.75rem"
}, ownerState.size === "lg" && {
  "--Icon-fontSize": theme.vars.fontSize.xl2,
  gap: "var(--Breadcrumbs-gap, 0.5rem)",
  padding: "1rem"
}, theme.typography[`body-${ownerState.size}`]));
var BreadcrumbsOl = styled_default("ol", {
  name: "JoyBreadcrumbs",
  slot: "Ol",
  overridesResolver: (props, styles) => styles.ol
})({
  display: "flex",
  flexWrap: "wrap",
  alignItems: "center",
  gap: "inherit",
  // reset user-agent style
  padding: 0,
  margin: 0,
  listStyle: "none"
});
var BreadcrumbsLi = styled_default("li", {
  name: "JoyBreadcrumbs",
  slot: "Li",
  overridesResolver: (props, styles) => styles.li
})({
  display: "flex",
  alignItems: "center"
});
var BreadcrumbsSeparator = styled_default("li", {
  name: "JoyBreadcrumbs",
  slot: "Separator",
  overridesResolver: (props, styles) => styles.separator
})({
  display: "flex",
  userSelect: "none"
});
var Breadcrumbs = React4.forwardRef(function Breadcrumbs2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyBreadcrumbs"
  });
  const {
    children,
    className,
    size = "md",
    separator = "/",
    component,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded4);
  const ownerState = _extends({}, props, {
    separator,
    size
  });
  const classes = useUtilityClasses4(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: BreadcrumbsRoot,
    externalForwardedProps,
    ownerState
  });
  const [SlotOl, olProps] = useSlot("ol", {
    className: classes.ol,
    elementType: BreadcrumbsOl,
    externalForwardedProps,
    ownerState
  });
  const [SlotLi, liProps] = useSlot("li", {
    className: classes.li,
    elementType: BreadcrumbsLi,
    externalForwardedProps,
    ownerState
  });
  const [SlotSeparator, separatorProps] = useSlot("separator", {
    additionalProps: {
      "aria-hidden": true
    },
    className: classes.separator,
    elementType: BreadcrumbsSeparator,
    externalForwardedProps,
    ownerState
  });
  const allItems = React4.Children.toArray(children).filter((child) => {
    return React4.isValidElement(child);
  }).map((child, index) => {
    var _child$props$componen;
    return (0, import_jsx_runtime6.jsx)(SlotLi, _extends({}, liProps, {
      children: isMuiElement(child, ["Typography"]) ? React4.cloneElement(child, {
        component: (_child$props$componen = child.props.component) != null ? _child$props$componen : "span"
      }) : child
    }), `child-${index}`);
  });
  return (0, import_jsx_runtime6.jsx)(TypographyInheritContext.Provider, {
    value: true,
    children: (0, import_jsx_runtime6.jsx)(SlotRoot, _extends({}, rootProps, {
      children: (0, import_jsx_runtime6.jsx)(SlotOl, _extends({}, olProps, {
        children: allItems.reduce((acc, current, index) => {
          if (index < allItems.length - 1) {
            acc = acc.concat(current, (0, import_jsx_runtime6.jsx)(SlotSeparator, _extends({}, separatorProps, {
              children: separator
            }), `separator-${index}`));
          } else {
            acc.push(current);
          }
          return acc;
        }, [])
      }))
    }))
  });
});
true ? Breadcrumbs.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types4.default.node,
  /**
   * @ignore
   */
  className: import_prop_types4.default.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types4.default.elementType,
  /**
   * Custom separator node.
   * @default '/'
   */
  separator: import_prop_types4.default.node,
  /**
   * The size of the component.
   * It accepts theme values between 'sm' and 'lg'.
   * @default 'md'
   */
  size: import_prop_types4.default.oneOfType([import_prop_types4.default.oneOf(["sm", "md", "lg"]), import_prop_types4.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types4.default.shape({
    li: import_prop_types4.default.oneOfType([import_prop_types4.default.func, import_prop_types4.default.object]),
    ol: import_prop_types4.default.oneOfType([import_prop_types4.default.func, import_prop_types4.default.object]),
    root: import_prop_types4.default.oneOfType([import_prop_types4.default.func, import_prop_types4.default.object]),
    separator: import_prop_types4.default.oneOfType([import_prop_types4.default.func, import_prop_types4.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types4.default.shape({
    li: import_prop_types4.default.elementType,
    ol: import_prop_types4.default.elementType,
    root: import_prop_types4.default.elementType,
    separator: import_prop_types4.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types4.default.oneOfType([import_prop_types4.default.arrayOf(import_prop_types4.default.oneOfType([import_prop_types4.default.func, import_prop_types4.default.object, import_prop_types4.default.bool])), import_prop_types4.default.func, import_prop_types4.default.object])
} : void 0;
var Breadcrumbs_default = Breadcrumbs;

// node_modules/@mui/joy/Container/Container.js
var import_prop_types5 = __toESM(require_prop_types());
var Container = createContainer({
  createStyledComponent: styled_default("div", {
    name: "JoyContainer",
    slot: "Root",
    overridesResolver: (props, styles) => styles.root
  }),
  useThemeProps: (inProps) => useThemeProps({
    props: inProps,
    name: "JoyContainer"
  })
});
true ? Container.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: import_prop_types5.default.node,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types5.default.elementType,
  /**
   * If `true`, the left and right padding is removed.
   * @default false
   */
  disableGutters: import_prop_types5.default.bool,
  /**
   * Set the max-width to match the min-width of the current breakpoint.
   * This is useful if you'd prefer to design for a fixed set of sizes
   * instead of trying to accommodate a fully fluid viewport.
   * It's fluid by default.
   * @default false
   */
  fixed: import_prop_types5.default.bool,
  /**
   * Determine the max-width of the container.
   * The container width grows with the size of the screen.
   * Set to `false` to disable `maxWidth`.
   * @default 'lg'
   */
  maxWidth: import_prop_types5.default.oneOfType([import_prop_types5.default.oneOf(["xs", "sm", "md", "lg", "xl", false]), import_prop_types5.default.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types5.default.oneOfType([import_prop_types5.default.arrayOf(import_prop_types5.default.oneOfType([import_prop_types5.default.func, import_prop_types5.default.object, import_prop_types5.default.bool])), import_prop_types5.default.func, import_prop_types5.default.object])
} : void 0;
var Container_default = Container;

// node_modules/@mui/joy/Container/containerClasses.js
function getContainerUtilityClass(slot) {
  return generateUtilityClass2("MuiContainer", slot);
}
var containerClasses = generateUtilityClasses2("MuiContainer", ["root", "disableGutters", "fixed", "maxWidthXs", "maxWidthSm", "maxWidthMd", "maxWidthLg", "maxWidthXl"]);
var containerClasses_default = containerClasses;

// node_modules/@mui/joy/Drawer/Drawer.js
var React5 = __toESM(require_react());
var import_prop_types6 = __toESM(require_prop_types());

// node_modules/@mui/joy/Drawer/drawerClasses.js
function getDrawerUtilityClass(slot) {
  return generateUtilityClass2("MuiDrawer", slot);
}
var drawerClasses = generateUtilityClasses2("MuiDrawer", ["root", "hidden", "backdrop", "content", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "sizeSm", "sizeMd", "sizeLg"]);
var drawerClasses_default = drawerClasses;

// node_modules/@mui/joy/Drawer/Drawer.js
var import_jsx_runtime7 = __toESM(require_jsx_runtime());
var import_jsx_runtime8 = __toESM(require_jsx_runtime());
var _excluded5 = ["children", "anchor", "container", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "color", "variant", "invertedColors", "size", "onClose", "onKeyDown", "open", "component", "slots", "slotProps"];
var useUtilityClasses5 = (ownerState) => {
  const {
    open,
    variant,
    color,
    size
  } = ownerState;
  const slots = {
    root: ["root", !open && "hidden", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`],
    backdrop: ["backdrop"],
    content: ["content"]
  };
  return composeClasses(slots, getDrawerUtilityClass, {});
};
var DrawerRoot = styled_default(StyledModalRoot, {
  name: "JoyDrawer",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  ownerState
}) => _extends({
  "--Drawer-transitionDuration": "0.3s",
  "--Drawer-transitionFunction": "ease",
  "--ModalClose-radius": "max((var(--Drawer-contentRadius) - var(--variant-borderWidth, 0px)) - var(--ModalClose-inset), min(var(--ModalClose-inset) / 2, (var(--Drawer-contentRadius) - var(--variant-borderWidth, 0px)) / 2))"
}, ownerState.size === "sm" && {
  "--ModalClose-inset": "0.5rem",
  "--Drawer-verticalSize": "clamp(350px, 30%, 100%)",
  "--Drawer-horizontalSize": "clamp(256px, 20%, 100%)",
  "--Drawer-titleMargin": "0.625rem 0.75rem calc(0.625rem / 2)"
}, ownerState.size === "md" && {
  "--ModalClose-inset": "0.5rem",
  "--Drawer-verticalSize": "clamp(400px, 45%, 100%)",
  "--Drawer-horizontalSize": "clamp(300px, 30%, 100%)",
  "--Drawer-titleMargin": "0.75rem 0.75rem calc(0.75rem / 2)"
}, ownerState.size === "lg" && {
  "--ModalClose-inset": "0.75rem",
  "--Drawer-verticalSize": "clamp(500px, 60%, 100%)",
  "--Drawer-horizontalSize": "clamp(440px, 60%, 100%)",
  "--Drawer-titleMargin": "1rem 1rem calc(1rem / 2)"
}, {
  transitionProperty: "visibility",
  transitionDelay: ownerState.open ? "0s" : "var(--Drawer-transitionDuration)"
}, !ownerState.open && {
  visibility: "hidden"
}));
var DrawerBackdrop = styled_default(StyledModalBackdrop, {
  name: "JoyDrawer",
  slot: "Backdrop",
  overridesResolver: (props, styles) => styles.backdrop
})(({
  ownerState
}) => ({
  opacity: ownerState.open ? 1 : 0,
  transition: "opacity var(--Drawer-transitionDuration) ease-in-out"
}));
var DrawerContent = styled_default("div", {
  name: "JoyDrawer",
  slot: "Content",
  overridesResolver: (props, styles) => styles.content
})(({
  theme,
  ownerState
}) => {
  var _theme$variants;
  return _extends({}, theme.typography[`body-${ownerState.size}`], {
    boxShadow: theme.shadow.md,
    backgroundColor: theme.vars.palette.background.surface,
    outline: 0,
    display: "flex",
    flexDirection: "column",
    position: "fixed",
    boxSizing: "border-box",
    overflow: "auto"
  }, ownerState.anchor === "left" && {
    top: 0,
    left: 0,
    transform: ownerState.open ? "translateX(0)" : "translateX(-100%)"
  }, ownerState.anchor === "right" && {
    top: 0,
    right: 0,
    transform: ownerState.open ? "translateX(0)" : "translateX(100%)"
  }, ownerState.anchor === "top" && {
    top: 0,
    transform: ownerState.open ? "translateY(0)" : "translateY(-100%)"
  }, ownerState.anchor === "bottom" && {
    bottom: 0,
    transform: ownerState.open ? "translateY(0)" : "translateY(100%)"
  }, {
    height: ownerState.anchor.match(/(left|right)/) ? "100%" : "min(100vh, var(--Drawer-verticalSize))",
    width: ownerState.anchor.match(/(top|bottom)/) ? "100vw" : "min(100vw, var(--Drawer-horizontalSize))",
    transition: "transform var(--Drawer-transitionDuration) var(--Drawer-transitionFunction)"
  }, ownerState.variant === "solid" && ownerState.color && ownerState.invertedColors && applySolidInversion(ownerState.color)(theme), ownerState.variant === "soft" && ownerState.color && ownerState.invertedColors && applySoftInversion(ownerState.color)(theme), (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color], {
    [`& > .${dialogTitleClasses_default.root}`]: {
      "--unstable_DialogTitle-margin": "var(--Drawer-titleMargin)"
    }
  });
});
var Drawer = React5.forwardRef(function Drawer2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyDrawer"
  });
  const {
    children,
    anchor = "left",
    container,
    disableAutoFocus = false,
    disableEnforceFocus = false,
    disableEscapeKeyDown = false,
    disablePortal = false,
    disableRestoreFocus = false,
    disableScrollLock = false,
    hideBackdrop = false,
    color = "neutral",
    variant = "plain",
    invertedColors = false,
    size = "md",
    onClose,
    open,
    component,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded5);
  const ownerState = _extends({}, props, {
    anchor,
    disableAutoFocus,
    disableEnforceFocus,
    disableEscapeKeyDown,
    disablePortal,
    disableRestoreFocus,
    disableScrollLock,
    hideBackdrop,
    invertedColors,
    color,
    variant,
    size
  });
  const {
    getRootProps,
    getBackdropProps,
    rootRef,
    portalRef,
    isTopModal
  } = useModal(_extends({}, ownerState, {
    rootRef: ref,
    children: null
  }));
  const classes = useUtilityClasses5(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const labelledBy = useId();
  const describedBy = useId();
  const contextValue = React5.useMemo(() => ({
    variant,
    color,
    labelledBy,
    describedBy
  }), [color, variant, labelledBy, describedBy]);
  const [SlotRoot, rootProps] = useSlot("root", {
    ref: rootRef,
    className: classes.root,
    elementType: DrawerRoot,
    externalForwardedProps,
    getSlotProps: getRootProps,
    ownerState
  });
  const [SlotBackdrop, backdropProps] = useSlot("backdrop", {
    className: classes.backdrop,
    elementType: DrawerBackdrop,
    externalForwardedProps,
    getSlotProps: getBackdropProps,
    ownerState
  });
  const [SlotContent, contentProps] = useSlot("content", {
    className: classes.content,
    elementType: DrawerContent,
    additionalProps: {
      tabIndex: -1,
      role: "dialog",
      "aria-modal": "true",
      "aria-labelledby": labelledBy,
      "aria-describedby": describedBy
    },
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime7.jsx)(CloseModalContext_default.Provider, {
    value: onClose,
    children: (0, import_jsx_runtime7.jsx)(ModalDialogSizeContext_default.Provider, {
      value: size,
      children: (0, import_jsx_runtime7.jsx)(ModalDialogVariantColorContext_default.Provider, {
        value: contextValue,
        children: (0, import_jsx_runtime7.jsx)(Portal, {
          ref: portalRef,
          container,
          disablePortal,
          children: (0, import_jsx_runtime8.jsxs)(SlotRoot, _extends({}, rootProps, {
            children: [!hideBackdrop ? (0, import_jsx_runtime7.jsx)(SlotBackdrop, _extends({}, backdropProps)) : null, (0, import_jsx_runtime7.jsx)(FocusTrap, {
              disableEnforceFocus,
              disableAutoFocus,
              disableRestoreFocus,
              isEnabled: isTopModal,
              open,
              children: (0, import_jsx_runtime7.jsx)(SlotContent, _extends({}, contentProps, {
                children
              }))
            })]
          }))
        })
      })
    })
  });
});
true ? Drawer.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Side from which the drawer will appear.
   * @default 'left'
   */
  anchor: import_prop_types6.default.oneOf(["bottom", "left", "right", "top"]),
  /**
   * @ignore
   */
  children: import_prop_types6.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types6.default.oneOf(["danger", "neutral", "primary", "success", "warning"]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types6.default.elementType,
  /**
   * An HTML element or function that returns one.
   * The `container` will have the portal children appended to it.
   *
   * You can also provide a callback, which is called in a React layout effect.
   * This lets you set the container from a ref, and also makes server-side rendering possible.
   *
   * By default, it uses the body of the top-level document object,
   * so it's simply `document.body` most of the time.
   */
  container: import_prop_types6.default.oneOfType([HTMLElementType, import_prop_types6.default.func]),
  /**
   * If `true`, the modal will not automatically shift focus to itself when it opens, and
   * replace it to the last focused element when it closes.
   * This also works correctly with any modal children that have the `disableAutoFocus` prop.
   *
   * Generally this should never be set to `true` as it makes the modal less
   * accessible to assistive technologies, like screen readers.
   * @default false
   */
  disableAutoFocus: import_prop_types6.default.bool,
  /**
   * If `true`, the modal will not prevent focus from leaving the modal while open.
   *
   * Generally this should never be set to `true` as it makes the modal less
   * accessible to assistive technologies, like screen readers.
   * @default false
   */
  disableEnforceFocus: import_prop_types6.default.bool,
  /**
   * If `true`, hitting escape will not fire the `onClose` callback.
   * @default false
   */
  disableEscapeKeyDown: import_prop_types6.default.bool,
  /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */
  disablePortal: import_prop_types6.default.bool,
  /**
   * If `true`, the modal will not restore focus to previously focused element once
   * modal is hidden or unmounted.
   * @default false
   */
  disableRestoreFocus: import_prop_types6.default.bool,
  /**
   * Disable the scroll lock behavior.
   * @default false
   */
  disableScrollLock: import_prop_types6.default.bool,
  /**
   * If `true`, the backdrop is not rendered.
   * @default false
   */
  hideBackdrop: import_prop_types6.default.bool,
  /**
   * If `true`, the children with an implicit color prop invert their colors to match the component's variant and color.
   * @default false
   */
  invertedColors: import_prop_types6.default.bool,
  /**
   * Callback fired when the component requests to be closed.
   * The `reason` parameter can optionally be used to control the response to `onClose`.
   *
   * @param {object} event The event source of the callback.
   * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`, `"closeClick"`.
   */
  onClose: import_prop_types6.default.func,
  /**
   * @ignore
   */
  onKeyDown: import_prop_types6.default.func,
  /**
   * If `true`, the component is shown.
   */
  open: import_prop_types6.default.bool.isRequired,
  /**
   * The size of the component.
   * @default 'md'
   */
  size: import_prop_types6.default.oneOf(["sm", "md", "lg"]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types6.default.shape({
    backdrop: import_prop_types6.default.oneOfType([import_prop_types6.default.func, import_prop_types6.default.object]),
    content: import_prop_types6.default.oneOfType([import_prop_types6.default.func, import_prop_types6.default.object]),
    root: import_prop_types6.default.oneOfType([import_prop_types6.default.func, import_prop_types6.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types6.default.shape({
    backdrop: import_prop_types6.default.elementType,
    content: import_prop_types6.default.elementType,
    root: import_prop_types6.default.elementType
  }),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types6.default.oneOf(["outlined", "plain", "soft", "solid"])
} : void 0;
var Drawer_default = Drawer;

// node_modules/@mui/joy/FormHelperText/FormHelperText.js
var React6 = __toESM(require_react());
var import_prop_types7 = __toESM(require_prop_types());

// node_modules/@mui/joy/FormHelperText/formHelperTextClasses.js
function getFormHelperTextUtilityClass(slot) {
  return generateUtilityClass2("MuiFormHelperText", slot);
}
var formHelperTextClasses = generateUtilityClasses2("MuiFormHelperText", ["root"]);
var formHelperTextClasses_default = formHelperTextClasses;

// node_modules/@mui/joy/FormHelperText/FormHelperText.js
var import_jsx_runtime9 = __toESM(require_jsx_runtime());
var _excluded6 = ["children", "component", "slots", "slotProps"];
var useUtilityClasses6 = () => {
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getFormHelperTextUtilityClass, {});
};
var FormHelperTextRoot = styled_default("div", {
  name: "JoyFormHelperText",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme
}) => ({
  "--Icon-fontSize": "calc(var(--FormHelperText-lineHeight) * 1em)",
  display: "flex",
  alignItems: "center",
  gap: "2px",
  fontFamily: theme.vars.fontFamily.body,
  fontSize: `var(--FormHelperText-fontSize, ${theme.vars.fontSize.sm})`,
  lineHeight: `var(--FormHelperText-lineHeight, ${theme.vars.lineHeight.sm})`,
  color: `var(--FormHelperText-color, ${theme.vars.palette.text.tertiary})`,
  margin: "var(--FormHelperText-margin, 0px)",
  [`.${formLabelClasses_default.root} + &`]: {
    "--FormHelperText-margin": "0px"
    // remove the margin if the helper text is next to the form label.
  },
  [`.${formControlClasses_default.error} &`]: {
    "--Icon-color": "currentColor"
  }
}));
var FormHelperText = React6.forwardRef(function FormHelperText2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyFormHelperText"
  });
  const {
    children,
    component,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded6);
  const rootRef = React6.useRef(null);
  const handleRef = useForkRef(rootRef, ref);
  const formControl = React6.useContext(FormControlContext_default);
  const setHelperText = formControl == null ? void 0 : formControl.setHelperText;
  React6.useEffect(() => {
    setHelperText == null || setHelperText(rootRef.current);
    return () => {
      setHelperText == null || setHelperText(null);
    };
  }, [setHelperText]);
  const classes = useUtilityClasses6();
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref: handleRef,
    elementType: FormHelperTextRoot,
    externalForwardedProps,
    ownerState: props,
    additionalProps: {
      as: component,
      id: formControl == null ? void 0 : formControl["aria-describedby"]
    },
    className: classes.root
  });
  return (0, import_jsx_runtime9.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? FormHelperText.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types7.default.node,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types7.default.elementType,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types7.default.shape({
    root: import_prop_types7.default.oneOfType([import_prop_types7.default.func, import_prop_types7.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types7.default.shape({
    root: import_prop_types7.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.func, import_prop_types7.default.object, import_prop_types7.default.bool])), import_prop_types7.default.func, import_prop_types7.default.object])
} : void 0;
var FormHelperText_default = FormHelperText;

// node_modules/@mui/joy/Grid/Grid.js
var import_prop_types8 = __toESM(require_prop_types());
var Grid = createGrid({
  createStyledComponent: styled_default("div", {
    name: "JoyGrid",
    slot: "Root",
    overridesResolver: (props, styles) => styles.root
  }),
  useThemeProps: (inProps) => useThemeProps({
    props: inProps,
    name: "JoyGrid"
  })
});
true ? Grid.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types8.default.node,
  /**
   * @ignore
   */
  sx: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.func, import_prop_types8.default.object, import_prop_types8.default.bool])), import_prop_types8.default.func, import_prop_types8.default.object])
} : void 0;
var Grid_default = Grid;

// node_modules/@mui/joy/Grid/gridClasses.js
function getGridUtilityClass(slot) {
  return generateUtilityClass("MuiGrid", slot);
}
var SPACINGS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
var DIRECTIONS = ["column-reverse", "column", "row-reverse", "row"];
var WRAPS = ["nowrap", "wrap-reverse", "wrap"];
var GRID_SIZES = ["auto", true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
var gridClasses = generateUtilityClasses("MuiGrid", [
  "root",
  "container",
  "item",
  "zeroMinWidth",
  // spacings
  ...SPACINGS.map((spacing) => `spacing-xs-${spacing}`),
  // direction values
  ...DIRECTIONS.map((direction) => `direction-xs-${direction}`),
  // wrap values
  ...WRAPS.map((wrap) => `wrap-xs-${wrap}`),
  // grid sizes for all breakpoints
  ...GRID_SIZES.map((size) => `grid-xs-${size}`),
  ...GRID_SIZES.map((size) => `grid-sm-${size}`),
  ...GRID_SIZES.map((size) => `grid-md-${size}`),
  ...GRID_SIZES.map((size) => `grid-lg-${size}`),
  ...GRID_SIZES.map((size) => `grid-xl-${size}`)
]);
var gridClasses_default = gridClasses;

// node_modules/@mui/joy/LinearProgress/LinearProgress.js
var React7 = __toESM(require_react());
var import_prop_types9 = __toESM(require_prop_types());

// node_modules/@mui/joy/LinearProgress/linearProgressClasses.js
function getLinearProgressUtilityClass(slot) {
  return generateUtilityClass2("MuiLinearProgress", slot);
}
var linearProgressClasses = generateUtilityClasses2("MuiLinearProgress", ["root", "determinate", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "sizeSm", "sizeMd", "sizeLg", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var linearProgressClasses_default = linearProgressClasses;

// node_modules/@mui/joy/LinearProgress/LinearProgress.js
var import_jsx_runtime10 = __toESM(require_jsx_runtime());
var _excluded7 = ["children", "className", "component", "color", "size", "variant", "thickness", "determinate", "value", "style", "slots", "slotProps"];
var _ = (t) => t;
var _t;
var _t2;
var progressKeyframe = keyframes(_t || (_t = _`
  0% {
    left: var(--_LinearProgress-progressInset);
    width: var(--LinearProgress-progressMinWidth);
  }

  25% {
    width: var(--LinearProgress-progressMaxWidth);
  }

  50% {
    left: var(--_LinearProgress-progressLeft);
    width: var(--LinearProgress-progressMinWidth);
  }

  75% {
    width: var(--LinearProgress-progressMaxWidth);
  }

  100% {
    left: var(--_LinearProgress-progressInset);
    width: var(--LinearProgress-progressMinWidth);
  }
`));
var useUtilityClasses7 = (ownerState) => {
  const {
    determinate,
    color,
    variant,
    size
  } = ownerState;
  const slots = {
    root: ["root", determinate && "determinate", color && `color${capitalize(color)}`, variant && `variant${capitalize(variant)}`, size && `size${capitalize(size)}`]
  };
  return composeClasses(slots, getLinearProgressUtilityClass, {});
};
var LinearProgressRoot = styled_default("div", {
  name: "JoyLinearProgress",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  ownerState,
  theme
}) => {
  var _theme$variants, _theme$variants$solid, _theme$variants$softH, _theme$variants$solid2;
  return _extends({
    // public variables
    "--LinearProgress-radius": "var(--LinearProgress-thickness)",
    "--LinearProgress-progressThickness": "var(--LinearProgress-thickness)",
    "--LinearProgress-progressRadius": "max(var(--LinearProgress-radius) - var(--_LinearProgress-padding), min(var(--_LinearProgress-padding) / 2, var(--LinearProgress-radius) / 2))"
  }, ownerState.size === "sm" && {
    "--LinearProgress-thickness": "4px"
  }, ownerState.size === "md" && {
    "--LinearProgress-thickness": "6px"
  }, ownerState.size === "lg" && {
    "--LinearProgress-thickness": "8px"
  }, ownerState.thickness && {
    "--LinearProgress-thickness": `${ownerState.thickness}px`
  }, !ownerState.determinate && {
    "--LinearProgress-progressMinWidth": "calc(var(--LinearProgress-percent) * 1% / 2)",
    "--LinearProgress-progressMaxWidth": "calc(var(--LinearProgress-percent) * 1%)",
    "--_LinearProgress-progressLeft": "calc(100% - var(--LinearProgress-progressMinWidth) - var(--_LinearProgress-progressInset))",
    "--_LinearProgress-progressInset": "calc(var(--LinearProgress-thickness) / 2 - var(--LinearProgress-progressThickness) / 2)"
  }, {
    minBlockSize: "var(--LinearProgress-thickness)",
    boxSizing: "border-box",
    borderRadius: "var(--LinearProgress-radius)",
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    flex: 1,
    padding: "var(--_LinearProgress-padding)",
    position: "relative"
  }, (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color], {
    "--_LinearProgress-padding": "max((var(--LinearProgress-thickness) - 2 * var(--variant-borderWidth, 0px) - var(--LinearProgress-progressThickness)) / 2, 0px)",
    "&::before": {
      content: '""',
      display: "block",
      boxSizing: "inherit",
      blockSize: "var(--LinearProgress-progressThickness)",
      borderRadius: "var(--LinearProgress-progressRadius)",
      backgroundColor: "currentColor",
      color: "inherit",
      position: "absolute"
      // required to make `left` animation works.
    }
  }, ownerState.variant === "soft" && {
    backgroundColor: theme.variants.soft.neutral.backgroundColor,
    color: (_theme$variants$solid = theme.variants.solid) == null ? void 0 : _theme$variants$solid[ownerState.color].backgroundColor
  }, ownerState.variant === "solid" && {
    backgroundColor: (_theme$variants$softH = theme.variants.softHover) == null ? void 0 : _theme$variants$softH[ownerState.color].backgroundColor,
    color: (_theme$variants$solid2 = theme.variants.solid) == null ? void 0 : _theme$variants$solid2[ownerState.color].backgroundColor
  });
}, ({
  ownerState
}) => ownerState.determinate ? {
  "&::before": {
    left: "var(--_LinearProgress-padding)",
    inlineSize: "calc(var(--LinearProgress-percent) * 1% - 2 * var(--_LinearProgress-padding))"
  }
} : css(_t2 || (_t2 = _`
          &::before {
            animation: ${0}
              var(--LinearProgress-circulation, 2.5s ease-in-out 0s infinite normal none running);
          }
        `), progressKeyframe), ({
  ownerState,
  theme
}) => {
  const {
    borderRadius,
    height
  } = resolveSxValue({
    theme,
    ownerState
  }, ["borderRadius", "height"]);
  return _extends({}, borderRadius !== void 0 && {
    "--LinearProgress-radius": borderRadius
  }, height !== void 0 && {
    "--LinearProgress-thickness": height
  });
});
var LinearProgress = React7.forwardRef(function LinearProgress2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyLinearProgress"
  });
  const {
    children,
    className,
    component,
    color = "primary",
    size = "md",
    variant = "soft",
    thickness,
    determinate = false,
    value = determinate ? 0 : 25,
    // `25` is the 1/4 of the bar.
    style,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded7);
  const ownerState = _extends({}, props, {
    component,
    color,
    size,
    variant,
    thickness,
    value,
    determinate,
    instanceSize: inProps.size
  });
  const classes = useUtilityClasses7(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: LinearProgressRoot,
    externalForwardedProps,
    ownerState,
    additionalProps: _extends({
      as: component,
      role: "progressbar",
      style: _extends({}, {
        "--LinearProgress-percent": value
      }, style)
    }, typeof value === "number" && determinate && {
      "aria-valuenow": Math.round(value)
    })
  });
  return (0, import_jsx_runtime10.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? LinearProgress.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: import_prop_types9.default.node,
  /**
   * @ignore
   */
  className: import_prop_types9.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'primary'
   */
  color: import_prop_types9.default.oneOfType([import_prop_types9.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types9.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types9.default.elementType,
  /**
   * The boolean to select a variant.
   * Use indeterminate when there is no progress value.
   * @default false
   */
  determinate: import_prop_types9.default.bool,
  /**
   * The size of the component.
   * It accepts theme values between 'sm' and 'lg'.
   * @default 'md'
   */
  size: import_prop_types9.default.oneOfType([import_prop_types9.default.oneOf(["sm", "md", "lg"]), import_prop_types9.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types9.default.shape({
    root: import_prop_types9.default.oneOfType([import_prop_types9.default.func, import_prop_types9.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types9.default.shape({
    root: import_prop_types9.default.elementType
  }),
  /**
   * @ignore
   */
  style: import_prop_types9.default.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types9.default.oneOfType([import_prop_types9.default.arrayOf(import_prop_types9.default.oneOfType([import_prop_types9.default.func, import_prop_types9.default.object, import_prop_types9.default.bool])), import_prop_types9.default.func, import_prop_types9.default.object]),
  /**
   * The thickness of the bar.
   */
  thickness: import_prop_types9.default.number,
  /**
   * The value of the progress indicator for the determinate variant.
   * Value between 0 and 100.
   *
   * @default determinate ? 0 : 25
   */
  value: import_prop_types9.default.number,
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'soft'
   */
  variant: import_prop_types9.default.oneOfType([import_prop_types9.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types9.default.string])
} : void 0;
var LinearProgress_default = LinearProgress;

// node_modules/@mui/joy/MenuList/MenuList.js
var React8 = __toESM(require_react());
var import_prop_types10 = __toESM(require_prop_types());

// node_modules/@mui/joy/MenuList/menuListClasses.js
function getMenuListUtilityClass(slot) {
  return generateUtilityClass2("MuiMenuList", slot);
}
var menuClasses = generateUtilityClasses2("MuiMenuList", ["root", "nested", "sizeSm", "sizeMd", "sizeLg", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var menuListClasses_default = menuClasses;

// node_modules/@mui/joy/MenuList/MenuList.js
var import_jsx_runtime11 = __toESM(require_jsx_runtime());
var _excluded8 = ["actions", "id", "component", "children", "size", "variant", "color", "onItemsChange", "slots", "slotProps"];
var useUtilityClasses8 = (ownerState) => {
  const {
    variant,
    color,
    size
  } = ownerState;
  const slots = {
    root: ["root", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`]
  };
  return composeClasses(slots, getMenuListUtilityClass, {});
};
var MenuListRoot = styled_default(StyledList, {
  name: "JoyMenuList",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants;
  const variantStyle = (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color];
  return _extends({
    "--focus-outline-offset": `calc(${theme.vars.focus.thickness} * -1)`,
    // to prevent the focus outline from being cut by overflow
    "--ListItem-stickyBackground": (variantStyle == null ? void 0 : variantStyle.backgroundColor) || (variantStyle == null ? void 0 : variantStyle.background) || theme.vars.palette.background.surface,
    "--ListItem-stickyTop": "calc(var(--List-padding, var(--ListDivider-gap)) * -1)"
  }, scopedVariables, {
    borderRadius: `var(--List-radius, ${theme.vars.radius.sm})`,
    overflow: "auto"
  }, !(variantStyle != null && variantStyle.backgroundColor) && {
    backgroundColor: theme.vars.palette.background.surface
  });
});
var MenuList = React8.forwardRef(function MenuList2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyMenuList"
  });
  const {
    actions,
    id: idProp,
    component,
    children,
    size = "md",
    variant = "outlined",
    color = "neutral",
    onItemsChange,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded8);
  const {
    contextValue: menuContextValue,
    getListboxProps,
    dispatch
  } = useMenu({
    listboxRef: ref,
    id: idProp,
    onItemsChange
  });
  React8.useImperativeHandle(actions, () => ({
    dispatch,
    resetHighlight: () => dispatch({
      type: ListActionTypes.resetHighlight,
      event: null
    })
  }), [dispatch]);
  const ownerState = _extends({}, props, {
    variant,
    color,
    size,
    nesting: false,
    row: false
  });
  const classes = useUtilityClasses8(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    elementType: MenuListRoot,
    getSlotProps: getListboxProps,
    externalForwardedProps,
    ownerState,
    className: classes.root
  });
  return (0, import_jsx_runtime11.jsx)(SlotRoot, _extends({}, rootProps, {
    children: (0, import_jsx_runtime11.jsx)(MenuProvider, {
      value: menuContextValue,
      children: (0, import_jsx_runtime11.jsx)(GroupListContext_default.Provider, {
        value: "menu",
        children: (0, import_jsx_runtime11.jsx)(ListProvider_default, {
          nested: true,
          children
        })
      })
    })
  }));
});
true ? MenuList.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * A ref with imperative actions.
   * It allows to select the first or last menu item.
   */
  actions: refType_default,
  /**
   * @ignore
   */
  children: import_prop_types10.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types10.default.oneOfType([import_prop_types10.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types10.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types10.default.elementType,
  /**
   * @ignore
   */
  id: import_prop_types10.default.string,
  /**
   * Function called when the items displayed in the menu change.
   */
  onItemsChange: import_prop_types10.default.func,
  /**
   * The size of the component (affect other nested list* components because the `Menu` inherits `List`).
   * @default 'md'
   */
  size: import_prop_types10.default.oneOfType([import_prop_types10.default.oneOf(["sm", "md", "lg"]), import_prop_types10.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types10.default.shape({
    root: import_prop_types10.default.oneOfType([import_prop_types10.default.func, import_prop_types10.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types10.default.shape({
    root: import_prop_types10.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types10.default.oneOfType([import_prop_types10.default.arrayOf(import_prop_types10.default.oneOfType([import_prop_types10.default.func, import_prop_types10.default.object, import_prop_types10.default.bool])), import_prop_types10.default.func, import_prop_types10.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'outlined'
   */
  variant: import_prop_types10.default.oneOfType([import_prop_types10.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types10.default.string])
} : void 0;
var MenuList_default = MenuList;

// node_modules/@mui/joy/ModalClose/ModalClose.js
var React9 = __toESM(require_react());
var import_prop_types11 = __toESM(require_prop_types());

// node_modules/@mui/joy/ModalClose/modalCloseClasses.js
function getModalCloseUtilityClass(slot) {
  return generateUtilityClass2("MuiModalClose", slot);
}
var modalCloseClasses = generateUtilityClasses2("MuiModalClose", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "sizeSm", "sizeMd", "sizeLg"]);
var modalCloseClasses_default = modalCloseClasses;

// node_modules/@mui/joy/ModalClose/ModalClose.js
var import_jsx_runtime12 = __toESM(require_jsx_runtime());
var _CloseIcon;
var _excluded9 = ["component", "color", "variant", "size", "onClick", "slots", "slotProps"];
var useUtilityClasses9 = (ownerState) => {
  const {
    variant,
    color,
    disabled,
    focusVisible,
    size
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", focusVisible && "focusVisible", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`]
  };
  return composeClasses(slots, getModalCloseUtilityClass, {});
};
var ModalCloseRoot = styled_default(StyledIconButton, {
  name: "JoyModalClose",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  ownerState,
  theme
}) => {
  var _theme$variants;
  return _extends({}, ownerState.size === "sm" && {
    "--IconButton-size": "1.75rem"
  }, ownerState.size === "md" && {
    "--IconButton-size": "2rem"
  }, ownerState.size === "lg" && {
    "--IconButton-size": "2.25rem"
  }, {
    position: "absolute",
    zIndex: 1,
    // stay on top of the title in case it is positioned relatively
    top: `var(--ModalClose-inset, 0.625rem)`,
    right: `var(--ModalClose-inset, 0.625rem)`,
    borderRadius: `var(--ModalClose-radius, ${theme.vars.radius.sm})`
  }, !((_theme$variants = theme.variants[ownerState.variant]) != null && (_theme$variants = _theme$variants[ownerState.color]) != null && _theme$variants.backgroundColor) && {
    color: theme.vars.palette.text.secondary
  });
});
var modalDialogVariantMapping = {
  plain: "plain",
  outlined: "plain",
  soft: "soft",
  solid: "solid"
};
var ModalClose = React9.forwardRef(function ModalClose2(inProps, ref) {
  var _ref, _inProps$variant, _ref2, _inProps$color, _ref3, _inProps$size;
  const props = useThemeProps({
    props: inProps,
    name: "JoyModalClose"
  });
  const {
    component = "button",
    color: colorProp = "neutral",
    variant: variantProp = "plain",
    size: sizeProp = "md",
    onClick,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded9);
  const closeModalContext = React9.useContext(CloseModalContext_default);
  const modalDialogVariantColor = React9.useContext(ModalDialogVariantColorContext_default);
  const variant = (_ref = (_inProps$variant = inProps.variant) != null ? _inProps$variant : modalDialogVariantMapping[modalDialogVariantColor == null ? void 0 : modalDialogVariantColor.variant]) != null ? _ref : variantProp;
  const color = (_ref2 = (_inProps$color = inProps.color) != null ? _inProps$color : modalDialogVariantColor == null ? void 0 : modalDialogVariantColor.color) != null ? _ref2 : colorProp;
  const modalDialogSize = React9.useContext(ModalDialogSizeContext_default);
  const size = (_ref3 = (_inProps$size = inProps.size) != null ? _inProps$size : modalDialogSize) != null ? _ref3 : sizeProp;
  const {
    focusVisible,
    getRootProps
  } = useButton(_extends({}, props, {
    rootRef: ref
  }));
  const ownerState = _extends({}, props, {
    color,
    component,
    variant,
    size,
    focusVisible
  });
  const classes = useUtilityClasses9(ownerState);
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    elementType: ModalCloseRoot,
    getSlotProps: getRootProps,
    externalForwardedProps: _extends({
      onClick: (event) => {
        closeModalContext == null || closeModalContext(event, "closeClick");
        onClick == null || onClick(event);
      }
    }, other, {
      component,
      slots,
      slotProps
    }),
    className: classes.root,
    ownerState
  });
  return (0, import_jsx_runtime12.jsx)(SlotRoot, _extends({}, rootProps, {
    children: _CloseIcon || (_CloseIcon = (0, import_jsx_runtime12.jsx)(Close_default, {}))
  }));
});
true ? ModalClose.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: import_prop_types11.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types11.default.oneOfType([import_prop_types11.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types11.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types11.default.elementType,
  /**
   * @ignore
   */
  onClick: import_prop_types11.default.func,
  /**
   * The size of the component.
   * @default 'md'
   */
  size: import_prop_types11.default.oneOfType([import_prop_types11.default.oneOf(["sm", "md", "lg"]), import_prop_types11.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types11.default.shape({
    root: import_prop_types11.default.oneOfType([import_prop_types11.default.func, import_prop_types11.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types11.default.shape({
    root: import_prop_types11.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types11.default.oneOfType([import_prop_types11.default.arrayOf(import_prop_types11.default.oneOfType([import_prop_types11.default.func, import_prop_types11.default.object, import_prop_types11.default.bool])), import_prop_types11.default.func, import_prop_types11.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types11.default.oneOfType([import_prop_types11.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types11.default.string])
} : void 0;
var ModalClose_default = ModalClose;

// node_modules/@mui/joy/ModalOverflow/ModalOverflow.js
var React10 = __toESM(require_react());
var import_prop_types12 = __toESM(require_prop_types());

// node_modules/@mui/joy/ModalOverflow/modalOverflowClasses.js
function getModalOverflowUtilityClass(slot) {
  return generateUtilityClass2("MuiModalOverflow", slot);
}
var modalOverflowClasses = generateUtilityClasses2("MuiModalOverflow", ["root"]);
var modalOverflowClasses_default = modalOverflowClasses;

// node_modules/@mui/joy/ModalOverflow/ModalOverflow.js
var import_jsx_runtime13 = __toESM(require_jsx_runtime());
var _excluded10 = ["children", "onClick"];
var useUtilityClasses10 = () => {
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getModalOverflowUtilityClass, {});
};
var ModalOverflowRoot = styled_default("div", {
  name: "JoyModalOverflow",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})({
  "--ModalOverflow-paddingY": "1.5rem",
  position: "absolute",
  top: 0,
  right: 0,
  bottom: 0,
  left: 0,
  height: "100%",
  overflow: "hidden auto",
  outline: "none",
  display: "flex",
  flexDirection: "column",
  // required for fullscreen ModalDialog, using `row` cannot be achieved.
  padding: "var(--ModalOverflow-paddingY) 0",
  // let's not create `size` prop to only control the `padding`.
  [`& .${modalDialogClasses_default.layoutCenter}`]: {
    position: "relative",
    margin: "auto",
    // to make the dialog stay at center when content does not overflow the screen.
    height: "max-content",
    // height is based on content, otherwise `margin: auto` will take place.
    maxHeight: "unset",
    transform: "none",
    top: "unset",
    left: "unset"
  },
  [`& .${modalDialogClasses_default.layoutFullscreen}`]: {
    position: "relative",
    width: "100%",
    margin: "calc(-1 * var(--ModalOverflow-paddingY)) 0",
    flex: 1
  }
});
var ModalOverflow = React10.forwardRef(function ModalOverflow2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyModalOverflow"
  });
  const {
    children,
    onClick
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded10);
  const onClose = React10.useContext(CloseModalContext_default);
  const ownerState = props;
  const classes = useUtilityClasses10();
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: classes.root,
    elementType: ModalOverflowRoot,
    externalForwardedProps: other,
    ownerState,
    additionalProps: {
      role: "presentation",
      tabIndex: -1,
      onClick: (event) => {
        if (event.target === event.currentTarget) {
          onClose == null || onClose(event, "backdropClick");
        }
        onClick == null || onClick(event);
      }
    }
  });
  return (0, import_jsx_runtime13.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? ModalOverflow.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: import_prop_types12.default.node,
  /**
   * @ignore
   */
  onClick: import_prop_types12.default.func,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types12.default.oneOfType([import_prop_types12.default.arrayOf(import_prop_types12.default.oneOfType([import_prop_types12.default.func, import_prop_types12.default.object, import_prop_types12.default.bool])), import_prop_types12.default.func, import_prop_types12.default.object])
} : void 0;
var ModalOverflow_default = ModalOverflow;

// node_modules/@mui/joy/Option/Option.js
var React11 = __toESM(require_react());
var import_prop_types13 = __toESM(require_prop_types());

// node_modules/@mui/joy/Option/optionClasses.js
function getOptionUtilityClass(slot) {
  return generateUtilityClass2("MuiOption", slot);
}
var optionClasses = generateUtilityClasses2("MuiOption", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "focusVisible", "disabled", "selected", "highlighted", "variantPlain", "variantSoft", "variantOutlined", "variantSolid"]);
var optionClasses_default = optionClasses;

// node_modules/@mui/joy/Option/Option.js
var import_jsx_runtime14 = __toESM(require_jsx_runtime());
var _excluded11 = ["component", "children", "disabled", "value", "label", "variant", "color", "slots", "slotProps"];
var useUtilityClasses11 = (ownerState) => {
  const {
    disabled,
    highlighted,
    selected
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", highlighted && "highlighted", selected && "selected"]
  };
  return composeClasses(slots, getOptionUtilityClass, {});
};
var OptionRoot = styled_default(StyledListItemButton, {
  name: "JoyOption",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants;
  const variantStyle = (_theme$variants = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants[ownerState.color];
  return {
    [`&.${optionClasses_default.highlighted}:not([aria-selected="true"])`]: {
      backgroundColor: variantStyle == null ? void 0 : variantStyle.backgroundColor
    }
  };
});
var Option = React11.memo(React11.forwardRef(function Option2(inProps, ref) {
  var _optionRef$current;
  const props = useThemeProps({
    props: inProps,
    name: "JoyOption"
  });
  const {
    component = "li",
    children,
    disabled = false,
    value,
    label,
    variant: variantProp = "plain",
    color: colorProp = "neutral",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded11);
  const row = React11.useContext(RowListContext_default);
  const {
    variant = variantProp,
    color = colorProp
  } = useVariantColor(inProps.variant, inProps.color);
  const optionRef = React11.useRef(null);
  const combinedRef = useForkRef(optionRef, ref);
  const computedLabel = label != null ? label : typeof children === "string" ? children : (_optionRef$current = optionRef.current) == null ? void 0 : _optionRef$current.innerText;
  const {
    getRootProps,
    selected,
    highlighted,
    index
  } = useOption({
    disabled,
    label: computedLabel,
    value,
    rootRef: combinedRef
  });
  const ownerState = _extends({}, props, {
    disabled,
    selected,
    highlighted,
    index,
    component,
    variant,
    color,
    row
  });
  const classes = useUtilityClasses11(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    getSlotProps: getRootProps,
    elementType: OptionRoot,
    externalForwardedProps,
    className: classes.root,
    ownerState
  });
  return (0, import_jsx_runtime14.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
}));
var StableOption = React11.forwardRef(function StableOption2(props, ref) {
  const {
    contextValue
  } = useOptionContextStabilizer(props.value);
  return (0, import_jsx_runtime14.jsx)(ListContext.Provider, {
    value: contextValue,
    children: (0, import_jsx_runtime14.jsx)(Option, _extends({}, props, {
      ref
    }))
  });
});
true ? StableOption.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types13.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types13.default.oneOfType([import_prop_types13.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types13.default.string]),
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: import_prop_types13.default.bool,
  /**
   * A text representation of the option's content.
   * Used for keyboard text navigation matching.
   */
  label: import_prop_types13.default.oneOfType([import_prop_types13.default.element, import_prop_types13.default.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types13.default.oneOfType([import_prop_types13.default.arrayOf(import_prop_types13.default.oneOfType([import_prop_types13.default.func, import_prop_types13.default.object, import_prop_types13.default.bool])), import_prop_types13.default.func, import_prop_types13.default.object]),
  /**
   * The option value.
   */
  value: import_prop_types13.default.any.isRequired,
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types13.default.oneOfType([import_prop_types13.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types13.default.string])
} : void 0;
var Option_default = StableOption;

// node_modules/@mui/joy/ScopedCssBaseline/ScopedCssBaseline.js
var React12 = __toESM(require_react());
var import_prop_types14 = __toESM(require_prop_types());

// node_modules/@mui/joy/ScopedCssBaseline/scopedCssBaselineClasses.js
function getScopedCssBaselineUtilityClass(slot) {
  return generateUtilityClass2("MuiScopedCssBaseline", slot);
}
var scopedCssBaselineClasses = generateUtilityClasses2("MuiScopedCssBaseline", ["root"]);
var scopedCssBaselineClasses_default = scopedCssBaselineClasses;

// node_modules/@mui/joy/ScopedCssBaseline/ScopedCssBaseline.js
var import_jsx_runtime15 = __toESM(require_jsx_runtime());
var _excluded12 = ["className", "component", "disableColorScheme", "slots", "slotProps"];
var useUtilityClasses12 = () => {
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getScopedCssBaselineUtilityClass, {});
};
var ScopedCssBaselineRoot = styled_default("div", {
  name: "JoyScopedCssBaseline",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  const colorSchemeStyles = {};
  if (!ownerState.disableColorScheme && theme.colorSchemes) {
    Object.entries(theme.colorSchemes).forEach(([key, scheme]) => {
      var _scheme$palette;
      colorSchemeStyles[`&${theme.getColorSchemeSelector(key).replace(/\s*&/, "")}`] = {
        colorScheme: (_scheme$palette = scheme.palette) == null ? void 0 : _scheme$palette.mode
      };
    });
  }
  return _extends({
    WebkitFontSmoothing: "antialiased",
    MozOsxFontSmoothing: "grayscale",
    // Change from `box-sizing: content-box` so that `width`
    // is not affected by `padding` or `border`.
    boxSizing: "border-box",
    // Fix font resize problem in iOS
    WebkitTextSizeAdjust: "100%",
    color: theme.vars.palette.text.primary
  }, theme.typography["body-md"], {
    backgroundColor: theme.vars.palette.background.body,
    "@media print": {
      // Save printer ink.
      backgroundColor: "#fff"
    },
    "& *, & *::before, & *::after": {
      boxSizing: "inherit"
    },
    "& strong, & b": {
      fontWeight: "bold"
    }
  }, colorSchemeStyles);
});
var ScopedCssBaseline = React12.forwardRef(function ScopedCssBaseline2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyScopedCssBaseline"
  });
  const {
    className,
    component = "div",
    disableColorScheme = false,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded12);
  const ownerState = _extends({}, props, {
    component,
    disableColorScheme
  });
  const classes = useUtilityClasses12();
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: ScopedCssBaselineRoot,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime15.jsx)(SlotRoot, _extends({}, rootProps));
});
true ? ScopedCssBaseline.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * You can wrap a node.
   */
  children: import_prop_types14.default.node,
  /**
   * @ignore
   */
  className: import_prop_types14.default.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types14.default.elementType,
  /**
   * Disable `color-scheme` CSS property.
   * For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme
   * For browser support, check out https://caniuse.com/?search=color-scheme
   * @default false
   */
  disableColorScheme: import_prop_types14.default.bool,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types14.default.shape({
    root: import_prop_types14.default.oneOfType([import_prop_types14.default.func, import_prop_types14.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types14.default.shape({
    root: import_prop_types14.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types14.default.oneOfType([import_prop_types14.default.arrayOf(import_prop_types14.default.oneOfType([import_prop_types14.default.func, import_prop_types14.default.object, import_prop_types14.default.bool])), import_prop_types14.default.func, import_prop_types14.default.object])
} : void 0;
var ScopedCssBaseline_default = ScopedCssBaseline;

// node_modules/@mui/joy/Skeleton/Skeleton.js
var React13 = __toESM(require_react());
var import_prop_types15 = __toESM(require_prop_types());

// node_modules/@mui/joy/Skeleton/skeletonClasses.js
function getSkeletonUtilityClass(slot) {
  return generateUtilityClass2("MuiSkeleton", slot);
}
var skeletonClasses = generateUtilityClasses2("MuiSkeleton", ["root", "variantOverlay", "variantCircular", "variantRectangular", "variantText", "variantInline", "h1", "h2", "h3", "h4", "title-lg", "title-md", "title-sm", "body-lg", "body-md", "body-sm", "body-xs"]);
var skeletonClasses_default = skeletonClasses;

// node_modules/@mui/joy/Skeleton/Skeleton.js
var import_jsx_runtime16 = __toESM(require_jsx_runtime());
var _excluded13 = ["className", "component", "children", "animation", "overlay", "loading", "variant", "level", "height", "width", "sx", "slots", "slotProps"];
var _2 = (t) => t;
var _t3;
var _t22;
var _t32;
var _t4;
var _t5;
var useUtilityClasses13 = (ownerState) => {
  const {
    variant,
    level
  } = ownerState;
  const slots = {
    root: ["root", variant && `variant${capitalize(variant)}`, level && `level${capitalize(level)}`]
  };
  return composeClasses(slots, getSkeletonUtilityClass, {});
};
var pulseKeyframe = keyframes(_t3 || (_t3 = _2`
  0% {
    opacity: 1;
  }

  50% {
    opacity: 0.8;
    background: var(--unstable_pulse-bg);
  }

  100% {
    opacity: 1;
  }
`));
var waveKeyframe = keyframes(_t22 || (_t22 = _2`
  0% {
    transform: translateX(-100%);
  }

  50% {
    /* +0.5s of delay between each loop */
    transform: translateX(100%);
  }

  100% {
    transform: translateX(100%);
  }
`));
var SkeletonRoot = styled_default("span", {
  name: "JoySkeleton",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(
  /**
   * Animations
   */
  ({
    ownerState,
    theme
  }) => ownerState.animation === "pulse" && ownerState.variant !== "inline" && css(_t32 || (_t32 = _2`
      &::before {
        animation: ${0} 2s ease-in-out 0.5s infinite;
        background: ${0};
      }
    `), pulseKeyframe, theme.vars.palette.background.level3),
  ({
    ownerState,
    theme
  }) => ownerState.animation === "pulse" && ownerState.variant === "inline" && css(_t4 || (_t4 = _2`
      &::after {
        animation: ${0} 2s ease-in-out 0.5s infinite;
        background: ${0};
      }
    `), pulseKeyframe, theme.vars.palette.background.level3),
  ({
    ownerState,
    theme
  }) => ownerState.animation === "wave" && css(_t5 || (_t5 = _2`
      /* Fix bug in Safari https://bugs.webkit.org/show_bug.cgi?id=68196 */
      -webkit-mask-image: -webkit-radial-gradient(white, black);
      background: ${0};

      &::after {
        content: ' ';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        z-index: var(--unstable_pseudo-zIndex);
        animation: ${0} 1.6s linear 0.5s infinite;
        background: linear-gradient(
          90deg,
          transparent,
          var(--unstable_wave-bg, rgba(0 0 0 / 0.08)),
          transparent
        );
        transform: translateX(-100%); /* Avoid flash during server-side hydration */
      }
    `), theme.vars.palette.background.level3, waveKeyframe),
  /**
   * Implementation notes:
   * 1. The `Skeleton` has 3 parts:
   *  - the root (span) element as a container
   *  - the ::before pseudo-element for covering the content
   *  - the ::after pseudo-element for animation on top of the ::before pseudo-element
   *
   * 2. The root element and ::before will change to absolute position when shape="overlay" to cover the parent's content.
   *
   * 3. For geometry shape (rectangular, circular), the typography styles are applied to the root element so that width, height can be customized based on the font-size.
   */
  ({
    ownerState,
    theme
  }) => {
    var _components, _theme$typography, _theme$typography2, _theme$typography3;
    const defaultLevel = ((_components = theme.components) == null || (_components = _components.JoyTypography) == null || (_components = _components.defaultProps) == null ? void 0 : _components.level) || "body1";
    return [{
      display: "block",
      position: "relative",
      "--unstable_pseudo-zIndex": 9,
      "--unstable_pulse-bg": theme.vars.palette.background.level1,
      overflow: "hidden",
      cursor: "default",
      color: "transparent",
      "& *": {
        visibility: "hidden"
      },
      "&::before": {
        display: "block",
        content: '" "',
        top: 0,
        bottom: 0,
        left: 0,
        right: 0,
        zIndex: "var(--unstable_pseudo-zIndex)",
        borderRadius: "inherit"
      },
      [theme.getColorSchemeSelector("dark")]: {
        "--unstable_wave-bg": "rgba(255 255 255 / 0.1)"
      }
    }, ownerState.variant === "rectangular" && _extends({
      borderRadius: "min(0.15em, 6px)",
      height: "auto",
      width: "100%",
      "&::before": {
        position: "absolute"
      }
    }, !ownerState.animation && {
      backgroundColor: theme.vars.palette.background.level3
    }, ownerState.level !== "inherit" && _extends({}, theme.typography[ownerState.level])), ownerState.variant === "circular" && _extends({
      borderRadius: "50%",
      width: "100%",
      height: "100%",
      "&::before": {
        position: "absolute"
      }
    }, !ownerState.animation && {
      backgroundColor: theme.vars.palette.background.level3
    }, ownerState.level !== "inherit" && _extends({}, theme.typography[ownerState.level])), ownerState.variant === "text" && _extends({
      borderRadius: "min(0.15em, 6px)",
      background: "transparent",
      width: "100%"
    }, ownerState.level !== "inherit" && _extends({}, theme.typography[ownerState.level || defaultLevel], {
      paddingBlockStart: `calc((${((_theme$typography = theme.typography[ownerState.level || defaultLevel]) == null ? void 0 : _theme$typography.lineHeight) || 1} - 1) * 0.56em)`,
      paddingBlockEnd: `calc((${((_theme$typography2 = theme.typography[ownerState.level || defaultLevel]) == null ? void 0 : _theme$typography2.lineHeight) || 1} - 1) * 0.44em)`,
      "&::before": _extends({
        height: "1em"
      }, theme.typography[ownerState.level || defaultLevel], ownerState.animation === "wave" && {
        backgroundColor: theme.vars.palette.background.level3
      }, !ownerState.animation && {
        backgroundColor: theme.vars.palette.background.level3
      }),
      "&::after": _extends({
        height: "1em",
        top: `calc((${((_theme$typography3 = theme.typography[ownerState.level || defaultLevel]) == null ? void 0 : _theme$typography3.lineHeight) || 1} - 1) * 0.56em)`
      }, theme.typography[ownerState.level || defaultLevel])
    })), ownerState.variant === "inline" && _extends({
      display: "inline",
      position: "initial",
      borderRadius: "min(0.15em, 6px)"
    }, !ownerState.animation && {
      backgroundColor: theme.vars.palette.background.level3
    }, ownerState.level !== "inherit" && _extends({}, theme.typography[ownerState.level]), {
      WebkitMaskImage: "-webkit-radial-gradient(white, black)",
      "&::before": {
        position: "absolute",
        zIndex: "var(--unstable_pseudo-zIndex)",
        backgroundColor: theme.vars.palette.background.level3
      }
    }, ownerState.animation === "pulse" && {
      "&::after": {
        content: '""',
        position: "absolute",
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        zIndex: "var(--unstable_pseudo-zIndex)",
        backgroundColor: theme.vars.palette.background.level3
      }
    }), ownerState.variant === "overlay" && _extends({
      borderRadius: theme.vars.radius.xs,
      position: "absolute",
      width: "100%",
      height: "100%",
      zIndex: "var(--unstable_pseudo-zIndex)"
    }, ownerState.animation === "pulse" && {
      backgroundColor: theme.vars.palette.background.surface
    }, ownerState.level !== "inherit" && _extends({}, theme.typography[ownerState.level]), {
      "&::before": {
        position: "absolute"
      }
    })];
  }
);
var Skeleton = React13.forwardRef(function Skeleton2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoySkeleton"
  });
  const {
    className,
    component = "span",
    children,
    animation = "pulse",
    overlay = false,
    loading = true,
    variant = "overlay",
    level = variant === "text" ? "body-md" : "inherit",
    height,
    width,
    sx,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded13);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps,
    sx: [{
      width,
      height
    }, ...Array.isArray(sx) ? sx : [sx]]
  });
  const ownerState = _extends({}, props, {
    animation,
    component,
    level,
    loading,
    overlay,
    variant,
    width,
    height
  });
  const classes = useUtilityClasses13(ownerState);
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: SkeletonRoot,
    externalForwardedProps,
    ownerState
  });
  return loading ? (0, import_jsx_runtime16.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  })) : (0, import_jsx_runtime16.jsx)(React13.Fragment, {
    children: React13.Children.map(children, (child, index) => index === 0 && React13.isValidElement(child) ? React13.cloneElement(child, {
      "data-first-child": ""
    }) : child)
  });
});
true ? Skeleton.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The animation.
   * If `false` the animation effect is disabled.
   * @default 'pulse'
   */
  animation: import_prop_types15.default.oneOf(["pulse", "wave", false]),
  /**
   * Used to render icon or text elements inside the Skeleton if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types15.default.node,
  /**
   * @ignore
   */
  className: import_prop_types15.default.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types15.default.elementType,
  /**
   * Height of the skeleton.
   * Useful when you don't want to adapt the skeleton to a text element but for instance a card.
   */
  height: import_prop_types15.default.oneOfType([import_prop_types15.default.arrayOf(import_prop_types15.default.oneOfType([import_prop_types15.default.number, import_prop_types15.default.string])), import_prop_types15.default.number, import_prop_types15.default.shape({
    lg: import_prop_types15.default.oneOfType([import_prop_types15.default.number, import_prop_types15.default.string]),
    md: import_prop_types15.default.oneOfType([import_prop_types15.default.number, import_prop_types15.default.string]),
    sm: import_prop_types15.default.oneOfType([import_prop_types15.default.number, import_prop_types15.default.string]),
    xl: import_prop_types15.default.oneOfType([import_prop_types15.default.number, import_prop_types15.default.string]),
    xs: import_prop_types15.default.oneOfType([import_prop_types15.default.number, import_prop_types15.default.string])
  }), import_prop_types15.default.string]),
  /**
   * Applies the theme typography styles.
   * @default variant === 'text' ? 'body-md' : 'inherit'
   */
  level: import_prop_types15.default.oneOfType([import_prop_types15.default.oneOf(["h1", "h2", "h3", "h4", "title-lg", "title-md", "title-sm", "body-lg", "body-md", "body-sm", "body-xs", "inherit"]), import_prop_types15.default.string]),
  /**
   * If `true`, the skeleton appears.
   * @default true
   */
  loading: import_prop_types15.default.bool,
  /**
   * If `true`, the skeleton's position will change to `absolute` to fill the available space of the nearest parent.
   * This prop is useful to create a placeholder that has the element's dimensions.
   * @default false
   */
  overlay: import_prop_types15.default.bool,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types15.default.shape({
    root: import_prop_types15.default.oneOfType([import_prop_types15.default.func, import_prop_types15.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types15.default.shape({
    root: import_prop_types15.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types15.default.oneOfType([import_prop_types15.default.arrayOf(import_prop_types15.default.oneOfType([import_prop_types15.default.func, import_prop_types15.default.object, import_prop_types15.default.bool])), import_prop_types15.default.func, import_prop_types15.default.object]),
  /**
   * The type of content that will be rendered.
   * @default 'overlay'
   */
  variant: import_prop_types15.default.oneOfType([import_prop_types15.default.oneOf(["circular", "inline", "overlay", "rectangular", "text"]), import_prop_types15.default.string]),
  /**
   * Width of the skeleton.
   * Useful when the skeleton is inside an inline element with no width of its own.
   */
  width: import_prop_types15.default.oneOfType([import_prop_types15.default.arrayOf(import_prop_types15.default.oneOfType([import_prop_types15.default.number, import_prop_types15.default.string])), import_prop_types15.default.number, import_prop_types15.default.shape({
    lg: import_prop_types15.default.oneOfType([import_prop_types15.default.number, import_prop_types15.default.string]),
    md: import_prop_types15.default.oneOfType([import_prop_types15.default.number, import_prop_types15.default.string]),
    sm: import_prop_types15.default.oneOfType([import_prop_types15.default.number, import_prop_types15.default.string]),
    xl: import_prop_types15.default.oneOfType([import_prop_types15.default.number, import_prop_types15.default.string]),
    xs: import_prop_types15.default.oneOfType([import_prop_types15.default.number, import_prop_types15.default.string])
  }), import_prop_types15.default.string])
} : void 0;
Skeleton.muiName = "Skeleton";
var Skeleton_default = Skeleton;

// node_modules/@mui/joy/Slider/Slider.js
var React14 = __toESM(require_react());
var import_prop_types16 = __toESM(require_prop_types());

// node_modules/@mui/joy/Slider/sliderClasses.js
function getSliderUtilityClass(slot) {
  return generateUtilityClass2("MuiSlider", slot);
}
var sliderClasses = generateUtilityClasses2("MuiSlider", ["root", "disabled", "dragging", "focusVisible", "marked", "vertical", "trackInverted", "trackFalse", "rail", "track", "mark", "markActive", "markLabel", "thumb", "thumbStart", "thumbEnd", "valueLabel", "valueLabelOpen", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "disabled", "sizeSm", "sizeMd", "sizeLg", "input"]);
var sliderClasses_default = sliderClasses;

// node_modules/@mui/joy/Slider/Slider.js
var import_jsx_runtime17 = __toESM(require_jsx_runtime());
var import_jsx_runtime18 = __toESM(require_jsx_runtime());
var _excluded14 = ["aria-label", "aria-valuetext", "className", "classes", "disableSwap", "disabled", "defaultValue", "getAriaLabel", "getAriaValueText", "marks", "max", "min", "name", "onChange", "onChangeCommitted", "onMouseDown", "orientation", "shiftStep", "scale", "step", "tabIndex", "track", "value", "valueLabelDisplay", "valueLabelFormat", "isRtl", "color", "size", "variant", "component", "slots", "slotProps"];
function Identity(x) {
  return x;
}
var useUtilityClasses14 = (ownerState) => {
  const {
    disabled,
    dragging,
    marked,
    orientation,
    track,
    variant,
    color,
    size
  } = ownerState;
  const slots = {
    root: ["root", disabled && "disabled", dragging && "dragging", marked && "marked", orientation === "vertical" && "vertical", track === "inverted" && "trackInverted", track === false && "trackFalse", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`],
    rail: ["rail"],
    track: ["track"],
    thumb: ["thumb", disabled && "disabled"],
    input: ["input"],
    mark: ["mark"],
    markActive: ["markActive"],
    markLabel: ["markLabel"],
    markLabelActive: ["markLabelActive"],
    valueLabel: ["valueLabel"],
    valueLabelOpen: ["valueLabelOpen"],
    active: ["active"],
    focusVisible: ["focusVisible"]
  };
  return composeClasses(slots, getSliderUtilityClass, {});
};
var sliderColorVariables = ({
  theme,
  ownerState
}) => (data = {}) => {
  var _theme$variants, _styles$VariantBor;
  const styles = ((_theme$variants = theme.variants[`${ownerState.variant}${data.state || ""}`]) == null ? void 0 : _theme$variants[ownerState.color]) || {};
  return _extends({}, !data.state && {
    "--variant-borderWidth": (_styles$VariantBor = styles["--variant-borderWidth"]) != null ? _styles$VariantBor : "0px"
  }, {
    "--Slider-trackColor": styles.color,
    "--Slider-thumbBackground": styles.color,
    "--Slider-thumbColor": styles.backgroundColor || theme.vars.palette.background.surface,
    "--Slider-trackBackground": styles.backgroundColor || theme.vars.palette.background.surface,
    "--Slider-trackBorderColor": styles.borderColor,
    "--Slider-railBackground": theme.vars.palette.background.level2
  });
};
var SliderRoot = styled_default("span", {
  name: "JoySlider",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  const getColorVariables = sliderColorVariables({
    theme,
    ownerState
  });
  return [_extends({
    "--Slider-size": "max(42px, max(var(--Slider-thumbSize), var(--Slider-trackSize)))",
    // Reach 42px touch target, about ~8mm on screen.
    "--Slider-trackRadius": "var(--Slider-size)",
    "--Slider-markBackground": theme.vars.palette.text.tertiary,
    [`& .${sliderClasses_default.markActive}`]: {
      "--Slider-markBackground": "var(--Slider-trackColor)"
    }
  }, ownerState.size === "sm" && {
    "--Slider-markSize": "2px",
    "--Slider-trackSize": "4px",
    "--Slider-thumbSize": "14px",
    "--Slider-valueLabelArrowSize": "6px"
  }, ownerState.size === "md" && {
    "--Slider-markSize": "2px",
    "--Slider-trackSize": "6px",
    "--Slider-thumbSize": "18px",
    "--Slider-valueLabelArrowSize": "8px"
  }, ownerState.size === "lg" && {
    "--Slider-markSize": "3px",
    "--Slider-trackSize": "8px",
    "--Slider-thumbSize": "24px",
    "--Slider-valueLabelArrowSize": "10px"
  }, {
    "--Slider-thumbRadius": "calc(var(--Slider-thumbSize) / 2)",
    "--Slider-thumbWidth": "var(--Slider-thumbSize)"
  }, getColorVariables(), {
    "&:hover": {
      "@media (hover: hover)": _extends({}, getColorVariables({
        state: "Hover"
      }))
    },
    "&:active": _extends({}, getColorVariables({
      state: "Active"
    })),
    [`&.${sliderClasses_default.disabled}`]: _extends({
      pointerEvents: "none",
      color: theme.vars.palette.text.tertiary
    }, getColorVariables({
      state: "Disabled"
    })),
    boxSizing: "border-box",
    display: "inline-block",
    position: "relative",
    cursor: "pointer",
    touchAction: "none",
    WebkitTapHighlightColor: "transparent"
  }, ownerState.orientation === "horizontal" && {
    padding: "calc(var(--Slider-size) / 2) 0",
    width: "100%"
  }, ownerState.orientation === "vertical" && {
    padding: "0 calc(var(--Slider-size) / 2)",
    height: "100%"
  }, {
    "@media print": {
      colorAdjust: "exact"
    }
  })];
});
var SliderRail = styled_default("span", {
  name: "JoySlider",
  slot: "Rail",
  overridesResolver: (props, styles) => styles.rail
})(({
  ownerState
}) => [_extends({
  display: "block",
  position: "absolute",
  backgroundColor: ownerState.track === "inverted" ? "var(--Slider-trackBackground)" : "var(--Slider-railBackground)",
  border: ownerState.track === "inverted" ? "var(--variant-borderWidth, 0px) solid var(--Slider-trackBorderColor)" : "initial",
  borderRadius: "var(--Slider-trackRadius)"
}, ownerState.orientation === "horizontal" && {
  height: "var(--Slider-trackSize)",
  top: "50%",
  left: 0,
  right: 0,
  transform: "translateY(-50%)"
}, ownerState.orientation === "vertical" && {
  width: "var(--Slider-trackSize)",
  top: 0,
  bottom: 0,
  left: "50%",
  transform: "translateX(-50%)"
}, ownerState.track === "inverted" && {
  opacity: 1
})]);
var SliderTrack = styled_default("span", {
  name: "JoySlider",
  slot: "Track",
  overridesResolver: (props, styles) => styles.track
})(({
  ownerState
}) => {
  return [_extends({
    display: "block",
    position: "absolute",
    color: "var(--Slider-trackColor)",
    border: ownerState.track === "inverted" ? "initial" : "var(--variant-borderWidth, 0px) solid var(--Slider-trackBorderColor)",
    backgroundColor: ownerState.track === "inverted" ? "var(--Slider-railBackground)" : "var(--Slider-trackBackground)"
  }, ownerState.orientation === "horizontal" && {
    height: "var(--Slider-trackSize)",
    top: "50%",
    transform: "translateY(-50%)",
    borderRadius: "var(--Slider-trackRadius) 0 0 var(--Slider-trackRadius)"
  }, ownerState.orientation === "vertical" && {
    width: "var(--Slider-trackSize)",
    left: "50%",
    transform: "translateX(-50%)",
    borderRadius: "0 0 var(--Slider-trackRadius) var(--Slider-trackRadius)"
  }, ownerState.track === false && {
    display: "none"
  })];
});
var SliderThumb = styled_default("span", {
  name: "JoySlider",
  slot: "Thumb",
  overridesResolver: (props, styles) => styles.thumb
})(({
  ownerState,
  theme
}) => {
  var _theme$vars$palette;
  return _extends({
    position: "absolute",
    boxSizing: "border-box",
    outline: 0,
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    width: "var(--Slider-thumbWidth)",
    height: "var(--Slider-thumbSize)",
    border: "var(--variant-borderWidth, 0px) solid var(--Slider-trackBorderColor)",
    borderRadius: "var(--Slider-thumbRadius)",
    boxShadow: "var(--Slider-thumbShadow)",
    color: "var(--Slider-thumbColor)",
    backgroundColor: "var(--Slider-thumbBackground)",
    [theme.focus.selector]: _extends({}, theme.focus.default, {
      outlineOffset: 0,
      outlineWidth: "max(4px, var(--Slider-thumbSize) / 3.6)",
      outlineColor: `rgba(${(_theme$vars$palette = theme.vars.palette) == null || (_theme$vars$palette = _theme$vars$palette[ownerState.color]) == null ? void 0 : _theme$vars$palette.mainChannel} / 0.32)`
    })
  }, ownerState.orientation === "horizontal" && {
    top: "50%",
    transform: "translate(-50%, -50%)"
  }, ownerState.orientation === "vertical" && {
    left: "50%",
    transform: "translate(-50%, 50%)"
  }, {
    "&::before": {
      // use pseudo element to create thumb's ring
      boxSizing: "border-box",
      content: '""',
      display: "block",
      position: "absolute",
      background: "transparent",
      // to not block the thumb's child
      top: 0,
      left: 0,
      width: "100%",
      height: "100%",
      border: "2px solid",
      borderColor: "var(--Slider-thumbColor)",
      borderRadius: "inherit"
    }
  });
});
var SliderMark = styled_default("span", {
  name: "JoySlider",
  slot: "Mark",
  overridesResolver: (props, styles) => styles.mark
})(({
  ownerState
}) => {
  return _extends({
    position: "absolute",
    width: "var(--Slider-markSize)",
    height: "var(--Slider-markSize)",
    borderRadius: "var(--Slider-markSize)",
    backgroundColor: "var(--Slider-markBackground)"
  }, ownerState.orientation === "horizontal" && _extends({
    top: "50%",
    transform: `translate(calc(var(--Slider-markSize) / -2), -50%)`
  }, ownerState.percent === 0 && {
    transform: `translate(min(var(--Slider-markSize), 3px), -50%)`
  }, ownerState.percent === 100 && {
    transform: `translate(calc(var(--Slider-markSize) * -1 - min(var(--Slider-markSize), 3px)), -50%)`
  }), ownerState.orientation === "vertical" && _extends({
    left: "50%",
    transform: "translate(-50%, calc(var(--Slider-markSize) / 2))"
  }, ownerState.percent === 0 && {
    transform: `translate(-50%, calc(min(var(--Slider-markSize), 3px) * -1))`
  }, ownerState.percent === 100 && {
    transform: `translate(-50%, calc(var(--Slider-markSize) * 1 + min(var(--Slider-markSize), 3px)))`
  }));
});
var SliderValueLabel = styled_default("span", {
  name: "JoySlider",
  slot: "ValueLabel",
  overridesResolver: (props, styles) => styles.valueLabel
})(({
  theme,
  ownerState
}) => _extends({}, ownerState.size === "sm" && {
  fontSize: theme.fontSize.xs,
  lineHeight: theme.lineHeight.md,
  paddingInline: "0.25rem",
  minWidth: "20px"
}, ownerState.size === "md" && {
  fontSize: theme.fontSize.sm,
  lineHeight: theme.lineHeight.md,
  paddingInline: "0.375rem",
  minWidth: "24px"
}, ownerState.size === "lg" && {
  fontSize: theme.fontSize.md,
  lineHeight: theme.lineHeight.md,
  paddingInline: "0.5rem",
  minWidth: "28px"
}, {
  zIndex: 1,
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  whiteSpace: "nowrap",
  fontFamily: theme.vars.fontFamily.body,
  fontWeight: theme.vars.fontWeight.md,
  bottom: 0,
  transformOrigin: "bottom center",
  transform: "translateY(calc((var(--Slider-thumbSize) + var(--Slider-valueLabelArrowSize)) * -1)) scale(0)",
  position: "absolute",
  backgroundColor: theme.vars.palette.background.tooltip,
  boxShadow: theme.shadow.sm,
  borderRadius: theme.vars.radius.xs,
  color: "#fff",
  "&::before": {
    display: "var(--Slider-valueLabelArrowDisplay)",
    position: "absolute",
    content: '""',
    color: theme.vars.palette.background.tooltip,
    bottom: 0,
    border: "calc(var(--Slider-valueLabelArrowSize) / 2) solid",
    borderColor: "currentColor",
    borderRightColor: "transparent",
    borderBottomColor: "transparent",
    borderLeftColor: "transparent",
    left: "50%",
    transform: "translate(-50%, 100%)",
    backgroundColor: "transparent"
  },
  [`&.${sliderClasses_default.valueLabelOpen}`]: {
    transform: "translateY(calc((var(--Slider-thumbSize) + var(--Slider-valueLabelArrowSize)) * -1)) scale(1)"
  }
}));
var SliderMarkLabel = styled_default("span", {
  name: "JoySlider",
  slot: "MarkLabel",
  overridesResolver: (props, styles) => styles.markLabel
})(({
  theme,
  ownerState
}) => _extends({
  fontFamily: theme.vars.fontFamily.body
}, ownerState.size === "sm" && {
  fontSize: theme.vars.fontSize.xs
}, ownerState.size === "md" && {
  fontSize: theme.vars.fontSize.sm
}, ownerState.size === "lg" && {
  fontSize: theme.vars.fontSize.md
}, {
  color: theme.palette.text.tertiary,
  position: "absolute",
  whiteSpace: "nowrap"
}, ownerState.orientation === "horizontal" && {
  top: "calc(50% + 4px + (max(var(--Slider-trackSize), var(--Slider-thumbSize)) / 2))",
  transform: "translateX(-50%)"
}, ownerState.orientation === "vertical" && {
  left: "calc(50% + 8px + (max(var(--Slider-trackSize), var(--Slider-thumbSize)) / 2))",
  transform: "translateY(50%)"
}));
var SliderInput = styled_default("input", {
  name: "JoySlider",
  slot: "Input",
  overridesResolver: (props, styles) => styles.input
})({});
var Slider = React14.forwardRef(function Slider2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoySlider"
  });
  const {
    "aria-label": ariaLabel,
    "aria-valuetext": ariaValuetext,
    className,
    classes: classesProp,
    disableSwap = false,
    disabled = false,
    defaultValue,
    getAriaLabel,
    getAriaValueText,
    marks: marksProp = false,
    max = 100,
    min = 0,
    orientation = "horizontal",
    shiftStep = 10,
    scale = Identity,
    step = 1,
    track = "normal",
    valueLabelDisplay = "off",
    valueLabelFormat = Identity,
    isRtl = false,
    color = "primary",
    size = "md",
    variant = "solid",
    component,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded14);
  const ownerState = _extends({}, props, {
    marks: marksProp,
    classes: classesProp,
    disabled,
    defaultValue,
    disableSwap,
    isRtl,
    max,
    min,
    orientation,
    shiftStep,
    scale,
    step,
    track,
    valueLabelDisplay,
    valueLabelFormat,
    color,
    size,
    variant
  });
  const {
    axisProps,
    getRootProps,
    getHiddenInputProps,
    getThumbProps,
    open,
    active,
    axis,
    focusedThumbIndex,
    range,
    dragging,
    marks,
    values,
    trackOffset,
    trackLeap,
    getThumbStyle
  } = useSlider(_extends({}, ownerState, {
    rootRef: ref
  }));
  ownerState.marked = marks.length > 0 && marks.some((mark) => mark.label);
  ownerState.dragging = dragging;
  const trackStyle = _extends({}, axisProps[axis].offset(trackOffset), axisProps[axis].leap(trackLeap));
  const classes = useUtilityClasses14(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: SliderRoot,
    externalForwardedProps,
    getSlotProps: getRootProps,
    ownerState
  });
  const [SlotRail, railProps] = useSlot("rail", {
    className: classes.rail,
    elementType: SliderRail,
    externalForwardedProps,
    ownerState
  });
  const [SlotTrack, trackProps] = useSlot("track", {
    additionalProps: {
      style: trackStyle
    },
    className: classes.track,
    elementType: SliderTrack,
    externalForwardedProps,
    ownerState
  });
  const [SlotMark, markProps] = useSlot("mark", {
    className: classes.mark,
    elementType: SliderMark,
    externalForwardedProps,
    ownerState
  });
  const [SlotMarkLabel, markLabelProps] = useSlot("markLabel", {
    className: classes.markLabel,
    elementType: SliderMarkLabel,
    externalForwardedProps,
    ownerState,
    additionalProps: {
      "aria-hidden": true
    }
  });
  const [SlotThumb, thumbProps] = useSlot("thumb", {
    className: classes.thumb,
    elementType: SliderThumb,
    externalForwardedProps,
    getSlotProps: getThumbProps,
    ownerState
  });
  const [SlotInput, inputProps] = useSlot("input", {
    className: classes.input,
    elementType: SliderInput,
    externalForwardedProps,
    getSlotProps: getHiddenInputProps,
    ownerState
  });
  const [SlotValueLabel, valueLabelProps] = useSlot("valueLabel", {
    className: classes.valueLabel,
    elementType: SliderValueLabel,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime18.jsxs)(SlotRoot, _extends({}, rootProps, {
    children: [(0, import_jsx_runtime17.jsx)(SlotRail, _extends({}, railProps)), (0, import_jsx_runtime17.jsx)(SlotTrack, _extends({}, trackProps)), marks.filter((mark) => mark.value >= min && mark.value <= max).map((mark, index) => {
      const percent = valueToPercent(mark.value, min, max);
      const style = axisProps[axis].offset(percent);
      let markActive;
      if (track === false) {
        markActive = values.indexOf(mark.value) !== -1;
      } else {
        markActive = track === "normal" && (range ? mark.value >= values[0] && mark.value <= values[values.length - 1] : mark.value <= values[0]) || track === "inverted" && (range ? mark.value <= values[0] || mark.value >= values[values.length - 1] : mark.value >= values[0]);
      }
      return (0, import_jsx_runtime18.jsxs)(React14.Fragment, {
        children: [(0, import_jsx_runtime17.jsx)(SlotMark, _extends({
          "data-index": index
        }, markProps, !isHostComponent_default(SlotMark) && {
          ownerState: _extends({}, markProps.ownerState, {
            percent
          })
        }, {
          style: _extends({}, style, markProps.style),
          className: clsx_default(markProps.className, markActive && classes.markActive)
        })), mark.label != null ? (0, import_jsx_runtime17.jsx)(SlotMarkLabel, _extends({
          "data-index": index
        }, markLabelProps, {
          style: _extends({}, style, markLabelProps.style),
          className: clsx_default(classes.markLabel, markLabelProps.className, markActive && classes.markLabelActive),
          children: mark.label
        })) : null]
      }, mark.value);
    }), values.map((value, index) => {
      const percent = valueToPercent(value, min, max);
      const style = axisProps[axis].offset(percent);
      return (0, import_jsx_runtime18.jsxs)(SlotThumb, _extends({
        "data-index": index
      }, thumbProps, {
        className: clsx_default(thumbProps.className, active === index && classes.active, focusedThumbIndex === index && classes.focusVisible),
        style: _extends({}, style, getThumbStyle(index), thumbProps.style),
        children: [(0, import_jsx_runtime17.jsx)(SlotInput, _extends({
          "data-index": index,
          "aria-label": getAriaLabel ? getAriaLabel(index) : ariaLabel,
          "aria-valuenow": scale(value),
          "aria-valuetext": getAriaValueText ? getAriaValueText(scale(value), index) : ariaValuetext,
          value: values[index]
        }, inputProps)), valueLabelDisplay !== "off" ? (0, import_jsx_runtime17.jsx)(SlotValueLabel, _extends({}, valueLabelProps, {
          className: clsx_default(valueLabelProps.className, (open === index || active === index || valueLabelDisplay === "on") && classes.valueLabelOpen),
          children: typeof valueLabelFormat === "function" ? valueLabelFormat(scale(value), index) : valueLabelFormat
        })) : null]
      }), index);
    })]
  }));
});
true ? Slider.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The label of the slider.
   */
  "aria-label": import_prop_types16.default.string,
  /**
   * A string value that provides a user-friendly name for the current value of the slider.
   */
  "aria-valuetext": import_prop_types16.default.string,
  /**
   * @ignore
   */
  children: import_prop_types16.default.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types16.default.object,
  /**
   * @ignore
   */
  className: import_prop_types16.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'primary'
   */
  color: import_prop_types16.default.oneOfType([import_prop_types16.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types16.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types16.default.elementType,
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: import_prop_types16.default.oneOfType([import_prop_types16.default.arrayOf(import_prop_types16.default.number), import_prop_types16.default.number]),
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: import_prop_types16.default.bool,
  /**
   * If `true`, the active thumb doesn't swap when moving pointer over a thumb while dragging another thumb.
   * @default false
   */
  disableSwap: import_prop_types16.default.bool,
  /**
   * Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.
   * This is important for screen reader users.
   * @param {number} index The thumb label's index to format.
   * @returns {string}
   */
  getAriaLabel: import_prop_types16.default.func,
  /**
   * Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.
   * This is important for screen reader users.
   * @param {number} value The thumb label's value to format.
   * @param {number} index The thumb label's index to format.
   * @returns {string}
   */
  getAriaValueText: import_prop_types16.default.func,
  /**
   * If `true` the Slider will be rendered right-to-left (with the lowest value on the right-hand side).
   * @default false
   */
  isRtl: import_prop_types16.default.bool,
  /**
   * Marks indicate predetermined values to which the user can move the slider.
   * If `true` the marks are spaced according the value of the `step` prop.
   * If an array, it should contain objects with `value` and an optional `label` keys.
   * @default false
   */
  marks: import_prop_types16.default.oneOfType([import_prop_types16.default.arrayOf(import_prop_types16.default.shape({
    label: import_prop_types16.default.node,
    value: import_prop_types16.default.number.isRequired
  })), import_prop_types16.default.bool]),
  /**
   * The maximum allowed value of the slider.
   * Should not be equal to min.
   * @default 100
   */
  max: import_prop_types16.default.number,
  /**
   * The minimum allowed value of the slider.
   * Should not be equal to max.
   * @default 0
   */
  min: import_prop_types16.default.number,
  /**
   * Name attribute of the hidden `input` element.
   */
  name: import_prop_types16.default.string,
  /**
   * Callback function that is fired when the slider's value changed.
   *
   * @param {Event} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (any).
   * **Warning**: This is a generic event not a change event.
   * @param {number | number[]} value The new value.
   * @param {number} activeThumb Index of the currently moved thumb.
   */
  onChange: import_prop_types16.default.func,
  /**
   * Callback function that is fired when the `mouseup` is triggered.
   *
   * @param {React.SyntheticEvent | Event} event The event source of the callback. **Warning**: This is a generic event not a change event.
   * @param {number | number[]} value The new value.
   */
  onChangeCommitted: import_prop_types16.default.func,
  /**
   * @ignore
   */
  onMouseDown: import_prop_types16.default.func,
  /**
   * The component orientation.
   * @default 'horizontal'
   */
  orientation: import_prop_types16.default.oneOf(["horizontal", "vertical"]),
  /**
   * A transformation function, to change the scale of the slider.
   * @param {any} x
   * @returns {any}
   * @default function Identity(x) {
   *   return x;
   * }
   */
  scale: import_prop_types16.default.func,
  /**
   * The granularity with which the slider can step through values when using Page Up/Page Down or Shift + Arrow Up/Arrow Down.
   * @default 10
   */
  shiftStep: import_prop_types16.default.number,
  /**
   * The size of the component.
   * It accepts theme values between 'sm' and 'lg'.
   * @default 'md'
   */
  size: import_prop_types16.default.oneOfType([import_prop_types16.default.oneOf(["sm", "md", "lg"]), import_prop_types16.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types16.default.shape({
    input: import_prop_types16.default.oneOfType([import_prop_types16.default.func, import_prop_types16.default.object]),
    mark: import_prop_types16.default.oneOfType([import_prop_types16.default.func, import_prop_types16.default.object]),
    markLabel: import_prop_types16.default.oneOfType([import_prop_types16.default.func, import_prop_types16.default.object]),
    rail: import_prop_types16.default.oneOfType([import_prop_types16.default.func, import_prop_types16.default.object]),
    root: import_prop_types16.default.oneOfType([import_prop_types16.default.func, import_prop_types16.default.object]),
    thumb: import_prop_types16.default.oneOfType([import_prop_types16.default.func, import_prop_types16.default.object]),
    track: import_prop_types16.default.oneOfType([import_prop_types16.default.func, import_prop_types16.default.object]),
    valueLabel: import_prop_types16.default.oneOfType([import_prop_types16.default.func, import_prop_types16.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types16.default.shape({
    input: import_prop_types16.default.elementType,
    mark: import_prop_types16.default.elementType,
    markLabel: import_prop_types16.default.elementType,
    rail: import_prop_types16.default.elementType,
    root: import_prop_types16.default.elementType,
    thumb: import_prop_types16.default.elementType,
    track: import_prop_types16.default.elementType,
    valueLabel: import_prop_types16.default.elementType
  }),
  /**
   * The granularity with which the slider can step through values. (A "discrete" slider.)
   * The `min` prop serves as the origin for the valid values.
   * We recommend (max - min) to be evenly divisible by the step.
   *
   * When step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.
   * @default 1
   */
  step: import_prop_types16.default.number,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types16.default.oneOfType([import_prop_types16.default.arrayOf(import_prop_types16.default.oneOfType([import_prop_types16.default.func, import_prop_types16.default.object, import_prop_types16.default.bool])), import_prop_types16.default.func, import_prop_types16.default.object]),
  /**
   * Tab index attribute of the hidden `input` element.
   */
  tabIndex: import_prop_types16.default.number,
  /**
   * The track presentation:
   *
   * - `normal` the track will render a bar representing the slider value.
   * - `inverted` the track will render a bar representing the remaining slider value.
   * - `false` the track will render without a bar.
   * @default 'normal'
   */
  track: import_prop_types16.default.oneOf(["inverted", "normal", false]),
  /**
   * The value of the slider.
   * For ranged sliders, provide an array with two values.
   */
  value: import_prop_types16.default.oneOfType([import_prop_types16.default.arrayOf(import_prop_types16.default.number), import_prop_types16.default.number]),
  /**
   * Controls when the value label is displayed:
   *
   * - `auto` the value label will display when the thumb is hovered or focused.
   * - `on` will display persistently.
   * - `off` will never display.
   * @default 'off'
   */
  valueLabelDisplay: import_prop_types16.default.oneOf(["auto", "off", "on"]),
  /**
   * The format function the value label's value.
   *
   * When a function is provided, it should have the following signature:
   *
   * - {number} value The value label's value to format
   * - {number} index The value label's index to format
   * @param {any} x
   * @returns {any}
   * @default function Identity(x) {
   *   return x;
   * }
   */
  valueLabelFormat: import_prop_types16.default.oneOfType([import_prop_types16.default.func, import_prop_types16.default.string]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'solid'
   */
  variant: import_prop_types16.default.oneOfType([import_prop_types16.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types16.default.string])
} : void 0;
var Slider_default = Slider;

// node_modules/@mui/joy/Snackbar/Snackbar.js
var React15 = __toESM(require_react());
var import_prop_types17 = __toESM(require_prop_types());

// node_modules/@mui/joy/Snackbar/snackbarClasses.js
function getSnackbarUtilityClass(slot) {
  return generateUtilityClass2("MuiSnackbar", slot);
}
var snackbarClasses = generateUtilityClasses2("MuiSnackbar", ["root", "anchorOriginTopCenter", "anchorOriginBottomCenter", "anchorOriginTopRight", "anchorOriginBottomRight", "anchorOriginTopLeft", "anchorOriginBottomLeft", "colorPrimary", "colorDanger", "colorNeutral", "colorSuccess", "colorWarning", "endDecorator", "sizeSm", "sizeMd", "sizeLg", "startDecorator", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var snackbarClasses_default = snackbarClasses;

// node_modules/@mui/joy/Snackbar/Snackbar.js
var import_jsx_runtime19 = __toESM(require_jsx_runtime());
var import_jsx_runtime20 = __toESM(require_jsx_runtime());
var _excluded15 = ["anchorOrigin", "animationDuration", "autoHideDuration", "color", "children", "className", "component", "disableWindowBlurListener", "endDecorator", "invertedColors", "onBlur", "onClose", "onFocus", "onMouseEnter", "onMouseLeave", "onUnmount", "open", "resumeHideDuration", "size", "slots", "slotProps", "startDecorator", "variant"];
var _3 = (t) => t;
var _t6;
var _t23;
var useUtilityClasses15 = (ownerState) => {
  const {
    variant,
    color,
    size,
    anchorOrigin
  } = ownerState;
  const slots = {
    root: ["root", size && `size${capitalize(size)}`, color && `color${capitalize(color)}`, variant && `variant${capitalize(variant)}`, `anchorOrigin${capitalize(anchorOrigin.vertical)}${capitalize(anchorOrigin.horizontal)}`],
    startDecorator: ["startDecorator"],
    endDecorator: ["endDecorator"]
  };
  return composeClasses(slots, getSnackbarUtilityClass, {});
};
var enterAnimation = keyframes(_t6 || (_t6 = _3`
  0% {
    transform: translateX(var(--Snackbar-translateX, 0px)) translateY(calc(var(--_Snackbar-anchorBottom, 1) * 100%));
    opacity: 0;
  }
  50% {
    opacity: 1;
  }
  100% {
    transform: translateX(var(--Snackbar-translateX, 0px)) translateY(0);
  }
`));
var exitAnimation = keyframes(_t23 || (_t23 = _3`
  0% {
    transform: translateX(var(--Snackbar-translateX, 0px)) translateY(0);
    opacity: 1;
  }
  100% {
    transform: translateX(var(--Snackbar-translateX, 0px)) translateY(calc(var(--_Snackbar-anchorBottom, 1) * 100%));
    opacity: 0;
  }
`));
var SnackbarRoot = styled_default("div", {
  name: "JoySnackbar",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _ownerState$anchorOri, _ownerState$anchorOri2, _ownerState$anchorOri3, _ownerState$anchorOri4, _ownerState$anchorOri5, _ownerState$anchorOri6, _theme$variants;
  const {
    p,
    padding,
    borderRadius
  } = resolveSxValue({
    theme,
    ownerState
  }, ["p", "padding", "borderRadius"]);
  return [_extends({
    "--Snackbar-radius": theme.vars.radius.sm,
    "--Snackbar-decoratorChildRadius": "max((var(--Snackbar-radius) - var(--variant-borderWidth, 0px)) - var(--Snackbar-padding), min(var(--Snackbar-padding) + var(--variant-borderWidth, 0px), var(--Snackbar-radius) / 2))",
    "--Button-minHeight": "var(--Snackbar-decoratorChildHeight)",
    "--IconButton-size": "var(--Snackbar-decoratorChildHeight)",
    "--Button-radius": "var(--Snackbar-decoratorChildRadius)",
    "--IconButton-radius": "var(--Snackbar-decoratorChildRadius)",
    "--Icon-color": "currentColor"
  }, ownerState.size === "sm" && {
    "--Snackbar-padding": "0.75rem",
    "--Snackbar-inset": "0.5rem",
    "--Snackbar-decoratorChildHeight": "1.5rem",
    "--Icon-fontSize": theme.vars.fontSize.xl,
    gap: "0.5rem"
  }, ownerState.size === "md" && {
    "--Snackbar-padding": "1rem",
    "--Snackbar-inset": "0.75rem",
    // the spacing between Snackbar and the viewport
    "--Snackbar-decoratorChildHeight": "2rem",
    "--Icon-fontSize": theme.vars.fontSize.xl,
    gap: "0.625rem"
  }, ownerState.size === "lg" && {
    "--Snackbar-padding": "1.25rem",
    "--Snackbar-inset": "1rem",
    "--Snackbar-decoratorChildHeight": "2.375rem",
    "--Icon-fontSize": theme.vars.fontSize.xl2,
    gap: "0.875rem"
  }, {
    zIndex: theme.vars.zIndex.snackbar,
    position: "fixed",
    display: "flex",
    alignItems: "center",
    minWidth: 300,
    top: ((_ownerState$anchorOri = ownerState.anchorOrigin) == null ? void 0 : _ownerState$anchorOri.vertical) === "top" ? "var(--Snackbar-inset)" : void 0,
    left: ((_ownerState$anchorOri2 = ownerState.anchorOrigin) == null ? void 0 : _ownerState$anchorOri2.horizontal) === "left" ? "var(--Snackbar-inset)" : void 0,
    bottom: ((_ownerState$anchorOri3 = ownerState.anchorOrigin) == null ? void 0 : _ownerState$anchorOri3.vertical) === "bottom" ? "var(--Snackbar-inset)" : void 0,
    right: ((_ownerState$anchorOri4 = ownerState.anchorOrigin) == null ? void 0 : _ownerState$anchorOri4.horizontal) === "right" ? "var(--Snackbar-inset)" : void 0
  }, ((_ownerState$anchorOri5 = ownerState.anchorOrigin) == null ? void 0 : _ownerState$anchorOri5.horizontal) === "center" && {
    "--Snackbar-translateX": "-50%",
    left: "50%",
    transform: "translateX(var(--Snackbar-translateX))"
  }, ((_ownerState$anchorOri6 = ownerState.anchorOrigin) == null ? void 0 : _ownerState$anchorOri6.vertical) === "top" && {
    "--_Snackbar-anchorBottom": "-1"
  }, {
    animation: `${enterAnimation} ${ownerState.animationDuration}ms forwards`
  }, !ownerState.open && {
    animationName: exitAnimation
  }, {
    boxShadow: theme.vars.shadow.lg,
    backgroundColor: theme.vars.palette.background.surface,
    padding: `var(--Snackbar-padding)`,
    borderRadius: "var(--Snackbar-radius)"
  }, theme.typography[`body-${{
    sm: "xs",
    md: "sm",
    lg: "md"
  }[ownerState.size]}`], ownerState.variant === "solid" && ownerState.color && ownerState.invertedColors && applySolidInversion(ownerState.color)(theme), ownerState.variant === "soft" && ownerState.color && ownerState.invertedColors && applySoftInversion(ownerState.color)(theme), (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color]), p !== void 0 && {
    "--Snackbar-padding": p
  }, padding !== void 0 && {
    "--Snackbar-padding": padding
  }, borderRadius !== void 0 && {
    "--Snackbar-radius": borderRadius
  }];
});
var SnackbarStartDecorator = styled_default("span", {
  name: "JoySnackbar",
  slot: "StartDecorator",
  overridesResolver: (props, styles) => styles.startDecorator
})({
  display: "inherit",
  flex: "none"
});
var SnackbarEndDecorator = styled_default("span", {
  name: "JoySnackbar",
  slot: "EndDecorator",
  overridesResolver: (props, styles) => styles.endDecorator
})({
  display: "inherit",
  flex: "none",
  marginLeft: "auto"
});
var defaultAnchorOrigin = {
  vertical: "bottom",
  horizontal: "right"
};
var Snackbar = React15.forwardRef(function Snackbar2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoySnackbar"
  });
  const {
    anchorOrigin = defaultAnchorOrigin,
    animationDuration = 300,
    autoHideDuration = null,
    color = "neutral",
    children,
    className,
    component,
    disableWindowBlurListener = false,
    endDecorator,
    invertedColors = false,
    onUnmount,
    open,
    size = "md",
    slots = {},
    slotProps,
    startDecorator,
    variant = "outlined"
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded15);
  const [exited, setExited] = React15.useState(true);
  const [exiting, setExiting] = React15.useState(false);
  const unmountRef = React15.useRef(onUnmount);
  unmountRef.current = onUnmount;
  React15.useEffect(() => {
    if (open) {
      setExiting(false);
      setExited(false);
    } else {
      setExiting(true);
      const timer = setTimeout(() => {
        var _unmountRef$current;
        setExited(true);
        setExiting(false);
        (_unmountRef$current = unmountRef.current) == null || _unmountRef$current.call(unmountRef);
      }, animationDuration);
      return () => {
        clearTimeout(timer);
      };
    }
    return void 0;
  }, [open, animationDuration]);
  const ownerState = _extends({}, props, {
    anchorOrigin,
    autoHideDuration,
    color,
    animationDuration,
    disableWindowBlurListener,
    invertedColors,
    size,
    variant
  });
  delete ownerState.onUnmount;
  const classes = useUtilityClasses15(ownerState);
  const {
    getRootProps,
    onClickAway
  } = useSnackbar(ownerState);
  const handleClickAway = (event) => {
    if (!exiting) {
      onClickAway(event);
    }
  };
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: SnackbarRoot,
    externalForwardedProps,
    getSlotProps: getRootProps,
    ownerState
  });
  const [SlotStartDecorator, startDecoratorProps] = useSlot("startDecorator", {
    className: classes.startDecorator,
    elementType: SnackbarStartDecorator,
    externalForwardedProps,
    ownerState
  });
  const [SlotEndDecorator, endDecoratorProps] = useSlot("endDecorator", {
    className: classes.endDecorator,
    elementType: SnackbarEndDecorator,
    externalForwardedProps,
    ownerState
  });
  const SlotClickAway = slots.clickAway || ClickAwayListener;
  if (!open && exited) {
    return null;
  }
  return (0, import_jsx_runtime19.jsx)(SlotClickAway, _extends({
    onClickAway: handleClickAway
  }, typeof (slotProps == null ? void 0 : slotProps.clickAway) === "function" ? slotProps.clickAway(ownerState) : slotProps == null ? void 0 : slotProps.clickAway, {
    children: (0, import_jsx_runtime20.jsxs)(SlotRoot, _extends({}, rootProps, {
      children: [startDecorator && (0, import_jsx_runtime19.jsx)(SlotStartDecorator, _extends({}, startDecoratorProps, {
        children: startDecorator
      })), children, endDecorator && (0, import_jsx_runtime19.jsx)(SlotEndDecorator, _extends({}, endDecoratorProps, {
        children: endDecorator
      }))]
    }))
  }));
});
true ? Snackbar.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The anchor of the `Snackbar`.
   * On smaller screens, the component grows to occupy all the available width,
   * the horizontal alignment is ignored.
   * @default { vertical: 'bottom', horizontal: 'right' }
   */
  anchorOrigin: import_prop_types17.default.shape({
    horizontal: import_prop_types17.default.oneOf(["center", "left", "right"]).isRequired,
    vertical: import_prop_types17.default.oneOf(["bottom", "top"]).isRequired
  }),
  /**
   * The duration of the animation in milliseconds. This value is used to control
   * the length of time it takes for an animation to complete one cycle. It is also
   * utilized for delaying the unmount of the component.
   * Provide this value if you have your own animation so that we can precisely
   * time the component's unmount to match your custom animation.
   * @default 300
   */
  animationDuration: import_prop_types17.default.number,
  /**
   * The number of milliseconds to wait before automatically calling the
   * `onClose` function. `onClose` should then set the state of the `open`
   * prop to hide the Snackbar. This behavior is disabled by default with
   * the `null` value.
   * @default null
   */
  autoHideDuration: import_prop_types17.default.number,
  /**
   * @ignore
   */
  children: import_prop_types17.default.node,
  /**
   * @ignore
   */
  className: import_prop_types17.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types17.default.oneOf(["danger", "neutral", "primary", "success", "warning"]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types17.default.elementType,
  /**
   * If `true`, the `autoHideDuration` timer will expire even if the window is not focused.
   * @default false
   */
  disableWindowBlurListener: import_prop_types17.default.bool,
  /**
   * Element placed after the children.
   */
  endDecorator: import_prop_types17.default.node,
  /**
   * If `true`, the children with an implicit color prop invert their colors to match the component's variant and color.
   * @default false
   */
  invertedColors: import_prop_types17.default.bool,
  /**
   * When displaying multiple consecutive snackbars using a single parent-rendered
   * `<Snackbar/>`, add the `key` prop to ensure independent treatment of each message.
   * For instance, use `<Snackbar key={message} />`. Otherwise, messages might update
   * in place, and features like `autoHideDuration` could be affected.
   */
  key: () => null,
  /**
   * @ignore
   */
  onBlur: import_prop_types17.default.func,
  /**
   * Callback fired when the component requests to be closed.
   * Typically `onClose` is used to set state in the parent component,
   * which is used to control the `Snackbar` `open` prop.
   * The `reason` parameter can optionally be used to control the response to `onClose`,
   * for example ignoring `clickaway`.
   *
   * @param {React.SyntheticEvent<any> | Event} event The event source of the callback.
   * @param {string} reason Can be: `"timeout"` (`autoHideDuration` expired), `"clickaway"`, or `"escapeKeyDown"`.
   */
  onClose: import_prop_types17.default.func,
  /**
   * @ignore
   */
  onFocus: import_prop_types17.default.func,
  /**
   * @ignore
   */
  onMouseEnter: import_prop_types17.default.func,
  /**
   * @ignore
   */
  onMouseLeave: import_prop_types17.default.func,
  /**
   * A callback fired when the component is about to be unmounted.
   */
  onUnmount: import_prop_types17.default.func,
  /**
   * If `true`, the component is shown.
   */
  open: import_prop_types17.default.bool.isRequired,
  /**
   * The number of milliseconds to wait before dismissing after user interaction.
   * If `autoHideDuration` prop isn't specified, it does nothing.
   * If `autoHideDuration` prop is specified but `resumeHideDuration` isn't,
   * we default to `autoHideDuration / 2` ms.
   */
  resumeHideDuration: import_prop_types17.default.number,
  /**
   * The size of the component.
   * @default 'md'
   */
  size: import_prop_types17.default.oneOf(["sm", "md", "lg"]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types17.default.shape({
    clickAway: import_prop_types17.default.oneOfType([import_prop_types17.default.func, import_prop_types17.default.shape({
      children: import_prop_types17.default.element.isRequired,
      disableReactTree: import_prop_types17.default.bool,
      mouseEvent: import_prop_types17.default.oneOf(["onClick", "onMouseDown", "onMouseUp", "onPointerDown", "onPointerUp", false]),
      onClickAway: import_prop_types17.default.func.isRequired,
      touchEvent: import_prop_types17.default.oneOf(["onTouchEnd", "onTouchStart", false])
    })]),
    endDecorator: import_prop_types17.default.oneOfType([import_prop_types17.default.func, import_prop_types17.default.object]),
    root: import_prop_types17.default.oneOfType([import_prop_types17.default.func, import_prop_types17.default.object]),
    startDecorator: import_prop_types17.default.oneOfType([import_prop_types17.default.func, import_prop_types17.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types17.default.shape({
    clickAway: import_prop_types17.default.elementType,
    endDecorator: import_prop_types17.default.elementType,
    root: import_prop_types17.default.elementType,
    startDecorator: import_prop_types17.default.elementType
  }),
  /**
   * Element placed before the children.
   */
  startDecorator: import_prop_types17.default.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types17.default.oneOfType([import_prop_types17.default.arrayOf(import_prop_types17.default.oneOfType([import_prop_types17.default.func, import_prop_types17.default.object, import_prop_types17.default.bool])), import_prop_types17.default.func, import_prop_types17.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'outlined'
   */
  variant: import_prop_types17.default.oneOf(["outlined", "plain", "soft", "solid"])
} : void 0;
var Snackbar_default = Snackbar;

// node_modules/@mui/joy/Stepper/Stepper.js
var React16 = __toESM(require_react());
var import_prop_types18 = __toESM(require_prop_types());

// node_modules/@mui/joy/Stepper/stepperClasses.js
function getStepperUtilityClass(slot) {
  return generateUtilityClass2("MuiStepper", slot);
}
var stepperClasses = generateUtilityClasses2("MuiStepper", ["root", "sizeSm", "sizeMd", "sizeLg", "horizontal", "vertical"]);
var stepperClasses_default = stepperClasses;

// node_modules/@mui/joy/Stepper/Stepper.js
var import_jsx_runtime21 = __toESM(require_jsx_runtime());
var _excluded16 = ["className", "component", "size", "children", "orientation", "slots", "slotProps"];
var useUtilityClasses16 = (ownerState) => {
  const {
    size,
    orientation
  } = ownerState;
  const slots = {
    root: ["root", orientation, size && `size${capitalize(size)}`]
  };
  return composeClasses(slots, getStepperUtilityClass, {});
};
var StepperRoot = styled_default("ol", {
  name: "JoyStepper",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme
}) => {
  return {
    "--Stepper-indicatorColumn": "auto",
    // For vertical stepper, to control the column width of the indicator.
    "--Step-connectorThickness": "1px",
    "--Step-indicatorDotSize": "0.375rem",
    boxSizing: "border-box",
    display: "flex",
    margin: 0,
    // Reset browser default style.
    padding: 0,
    // Reset browser default style.
    variants: [{
      props: {
        size: "sm"
      },
      style: _extends({
        "--Stepper-verticalGap": "0.5rem",
        "--Step-gap": "0.375rem",
        "--Step-connectorInset": "0.25rem",
        "--StepIndicator-size": "1.25rem"
      }, theme.typography["title-sm"])
    }, {
      props: {
        size: "md"
      },
      style: _extends({
        "--Stepper-verticalGap": "0.75rem",
        "--Step-gap": "0.5rem",
        "--Step-connectorInset": "0.375rem",
        "--StepIndicator-size": "1.5rem"
      }, theme.typography["title-md"])
    }, {
      props: {
        size: "lg"
      },
      style: _extends({
        "--Stepper-verticalGap": "0.75rem",
        "--Step-gap": "0.5rem",
        "--Step-connectorInset": "0.5rem",
        "--StepIndicator-size": "1.75rem"
      }, theme.typography["title-lg"])
    }, {
      props: {
        orientation: "vertical"
      },
      style: {
        flexDirection: "column",
        gap: "var(--Stepper-verticalGap)"
      }
    }]
  };
});
var Stepper = React16.forwardRef(function Stepper2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyStepper"
  });
  const {
    className,
    component = "ol",
    size = "md",
    children,
    orientation = "horizontal",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded16);
  const ownerState = _extends({}, props, {
    component,
    orientation,
    size
  });
  const classes = useUtilityClasses16(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: StepperRoot,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime21.jsx)(SlotRoot, _extends({}, rootProps, {
    children: React16.Children.map(children, (child, index) => {
      if (!React16.isValidElement(child)) {
        return child;
      }
      const extraProps = {};
      if (index === 0) {
        extraProps["data-first-child"] = "";
      }
      if (index === React16.Children.count(children) - 1) {
        extraProps["data-last-child"] = "";
      }
      return React16.cloneElement(child, extraProps);
    })
  }));
});
true ? Stepper.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Used to render icon or text elements inside the Stepper if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types18.default.node,
  /**
   * @ignore
   */
  className: import_prop_types18.default.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types18.default.elementType,
  /**
   * The component orientation.
   * @default 'horizontal'
   */
  orientation: import_prop_types18.default.oneOf(["horizontal", "vertical"]),
  /**
   * The size of the component.
   * It accepts theme values between 'sm' and 'lg'.
   * @default 'md'
   */
  size: import_prop_types18.default.oneOfType([import_prop_types18.default.oneOf(["lg", "md", "sm"]), import_prop_types18.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types18.default.shape({
    root: import_prop_types18.default.oneOfType([import_prop_types18.default.func, import_prop_types18.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types18.default.shape({
    root: import_prop_types18.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types18.default.oneOfType([import_prop_types18.default.arrayOf(import_prop_types18.default.oneOfType([import_prop_types18.default.func, import_prop_types18.default.object, import_prop_types18.default.bool])), import_prop_types18.default.func, import_prop_types18.default.object])
} : void 0;
var Stepper_default = Stepper;

// node_modules/@mui/joy/Step/Step.js
var React17 = __toESM(require_react());
var import_prop_types19 = __toESM(require_prop_types());

// node_modules/@mui/joy/Step/stepClasses.js
function getStepUtilityClass(slot) {
  return generateUtilityClass2("MuiStep", slot);
}
var stepClasses = generateUtilityClasses2("MuiStep", ["root", "indicator", "horizontal", "vertical", "active", "completed", "disabled"]);
var stepClasses_default = stepClasses;

// node_modules/@mui/joy/Step/Step.js
var import_jsx_runtime22 = __toESM(require_jsx_runtime());
var import_jsx_runtime23 = __toESM(require_jsx_runtime());
var _excluded17 = ["active", "completed", "className", "component", "children", "disabled", "orientation", "indicator", "slots", "slotProps"];
var useUtilityClasses17 = (ownerState) => {
  const {
    orientation,
    active,
    completed,
    disabled
  } = ownerState;
  const slots = {
    root: ["root", orientation, active && "active", completed && "completed", disabled && "disabled"],
    indicator: ["indicator"]
  };
  return composeClasses(slots, getStepUtilityClass, {});
};
var StepRoot = styled_default("li", {
  name: "JoyStep",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme
}) => {
  return {
    position: "relative",
    display: "flex",
    gridTemplateColumns: "var(--Stepper-indicatorColumn) 1fr",
    // for vertical stepper. has no effect on horizontal stepper.
    gridAutoFlow: "dense",
    flex: "var(--_Step-flex)",
    flexDirection: "row",
    alignItems: "var(--_Step-alignItems, center)",
    justifyContent: "var(--_Step-justify, center)",
    gap: `var(--Step-gap)`,
    "& > *": {
      zIndex: 1,
      [`&:not(.${stepClasses_default.indicator})`]: {
        gridColumn: "2"
      }
    },
    "&::after": {
      content: '""',
      display: "block",
      borderRadius: "var(--Step-connectorRadius)",
      height: `var(--Step-connectorThickness)`,
      background: `var(--Step-connectorBg, ${theme.vars.palette.divider})`,
      flex: 1,
      marginInlineStart: `calc(var(--Step-connectorInset) - var(--Step-gap))`,
      marginInlineEnd: `var(--Step-connectorInset)`,
      zIndex: 0
    },
    "&[data-last-child]::after": {
      display: "none"
    },
    [`.${stepperClasses_default.horizontal} &:not([data-last-child])`]: {
      "--_Step-flex": "auto",
      // requires to be `auto` to make equally connectors.
      [`&.${stepClasses_default.vertical}`]: {
        "--_Step-flex": 1
        // requires to be `1` to make equally connectors.
      }
    },
    [`.${stepperClasses_default.vertical} &`]: {
      display: "grid",
      "--_Step-justify": "flex-start",
      "&::after": {
        gridColumn: "1",
        width: `var(--Step-connectorThickness)`,
        height: "auto",
        margin: `calc(var(--Step-connectorInset) - var(--Step-gap)) auto calc(var(--Step-connectorInset) - var(--Stepper-verticalGap))`,
        alignSelf: "stretch"
      }
    },
    variants: [{
      props: {
        orientation: "vertical"
      },
      style: {
        flexDirection: "column",
        [`.${stepperClasses_default.horizontal} &`]: {
          "&[data-last-child]": {
            // for horizontal stepper, all vertical steps must have flex `1` to stretch equally.
            "--_Step-flex": 1
          },
          "&[data-indicator]": {
            "--_Step-justify": "flex-start"
          },
          "&::after": {
            margin: 0,
            position: "absolute",
            height: `var(--Step-connectorThickness)`,
            zIndex: 0,
            top: `calc(var(--StepIndicator-size) / 2 - var(--Step-connectorThickness) / 2)`,
            left: `calc(50% + var(--StepIndicator-size) / 2 + var(--Step-connectorInset))`,
            width: `calc(100% - var(--StepIndicator-size) - 2 * var(--Step-connectorInset))`
          },
          // Eventhough `:has` is <90% support, we can use it because this is an edge case for vertical step without an indicator.
          [`&:has(.${stepClasses_default.indicator}:empty)::after`]: {
            "--StepIndicator-size": "0px",
            "--Step-connectorInset": "0px",
            top: `calc(50% - var(--Step-connectorThickness) / 2)`
          }
        }
      }
    }]
  };
});
var StepIndicator = styled_default("div", {
  name: "JoyStep",
  slot: "Indicator",
  overridesResolver: (props, styles) => styles.root
})({
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  placeSelf: "center",
  // for vertical stepper
  width: `var(--StepIndicator-size)`,
  height: `var(--StepIndicator-size)`,
  [`.${stepperClasses_default.horizontal} &:empty`]: {
    display: "none"
  },
  [`.${stepperClasses_default.vertical} &:empty`]: {
    height: "auto",
    "&::before": {
      content: '""',
      display: "block",
      width: "var(--Step-indicatorDotSize)",
      height: "var(--Step-indicatorDotSize)",
      borderRadius: "var(--Step-indicatorDotSize)",
      color: "inherit",
      background: "currentColor"
    }
  }
});
var Step = React17.forwardRef(function Step2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyStep"
  });
  const {
    active = false,
    completed = false,
    className,
    component = "li",
    children,
    disabled = false,
    orientation = "horizontal",
    indicator,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded17);
  const ownerState = _extends({}, props, {
    active,
    completed,
    component,
    disabled,
    orientation
  });
  const classes = useUtilityClasses17(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: StepRoot,
    externalForwardedProps,
    ownerState,
    additionalProps: {
      "data-indicator": indicator ? "" : void 0
    }
  });
  const [SlotIndicator, indicatorProps] = useSlot("indicator", {
    ref,
    className: classes.indicator,
    elementType: StepIndicator,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime23.jsxs)(SlotRoot, _extends({}, rootProps, {
    children: [(0, import_jsx_runtime22.jsx)(SlotIndicator, _extends({}, indicatorProps, {
      children: indicator
    })), children]
  }));
});
true ? Step.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * If `true`, the active className is appended.
   * You can customize the active state from the Stepper's `sx` prop.
   * @default false
   */
  active: import_prop_types19.default.bool,
  /**
   * Used to render icon or text elements inside the Step if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types19.default.node,
  /**
   * @ignore
   */
  className: import_prop_types19.default.string,
  /**
   * If `true`, the completed className is appended.
   * You can customize the active state from the Stepper's `sx` prop.
   * @default false
   */
  completed: import_prop_types19.default.bool,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types19.default.elementType,
  /**
   * If `true`, the active className is appended.
   * You can customize the active state from the Stepper's `sx` prop.
   * @default false
   */
  disabled: import_prop_types19.default.bool,
  /**
   * The indicator to display. If provided, a wrapper element will be used.
   */
  indicator: import_prop_types19.default.node,
  /**
   * The component orientation.
   * @default 'horizontal'
   */
  orientation: import_prop_types19.default.oneOf(["horizontal", "vertical"]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types19.default.shape({
    indicator: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object]),
    root: import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types19.default.shape({
    indicator: import_prop_types19.default.elementType,
    root: import_prop_types19.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types19.default.oneOfType([import_prop_types19.default.arrayOf(import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object, import_prop_types19.default.bool])), import_prop_types19.default.func, import_prop_types19.default.object])
} : void 0;
var Step_default = Step;

// node_modules/@mui/joy/StepButton/StepButton.js
var React18 = __toESM(require_react());
var import_prop_types20 = __toESM(require_prop_types());

// node_modules/@mui/joy/StepButton/stepButtonClasses.js
function getStepButtonUtilityClass(slot) {
  return generateUtilityClass2("MuiStepButton", slot);
}
var stepButtonClasses = generateUtilityClasses2("MuiStepButton", ["root"]);
var stepButtonClasses_default = stepButtonClasses;

// node_modules/@mui/joy/StepButton/StepButton.js
var import_jsx_runtime24 = __toESM(require_jsx_runtime());
var _excluded18 = ["className", "component", "children", "slots", "slotProps"];
var StepButtonRoot = styled_default("button", {
  name: "JoyStepButton",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme
}) => {
  return {
    [`.${stepClasses_default.indicator}:empty + &`]: {
      "--StepIndicator-size": "0px",
      "--Step-gap": "0px"
    },
    [`.${stepClasses_default.horizontal} &`]: {
      "--_StepButton-alignSelf": "stretch",
      "--_StepButton-gap": "var(--Step-gap)"
    },
    [`.${stepClasses_default.horizontal} &::before`]: {
      "--_StepButton-left": "calc(-1 * (var(--StepIndicator-size) + var(--Step-gap)))"
    },
    [`.${stepClasses_default.vertical} &::before`]: {
      "--_StepButton-top": "calc(-1 * (var(--StepIndicator-size) + var(--Step-gap)))"
    },
    [`.${stepperClasses_default.vertical} .${stepClasses_default.vertical} &`]: {
      "--_StepButton-alignItems": "flex-start"
    },
    [`.${stepperClasses_default.vertical} &::before`]: {
      "--_StepButton-left": "calc(-1 * (var(--StepIndicator-size) + var(--Step-gap)))",
      "--_StepButton-top": "0px"
    },
    WebkitTapHighlightColor: "transparent",
    boxSizing: "border-box",
    border: "none",
    backgroundColor: "transparent",
    cursor: "pointer",
    position: "relative",
    padding: 0,
    textDecoration: "none",
    // prevent user agent underline when used as anchor
    font: "inherit",
    display: "inline-flex",
    flexDirection: "inherit",
    alignItems: "var(--_StepButton-alignItems, inherit)",
    alignSelf: "var(--_StepButton-alignSelf)",
    gap: "var(--_StepButton-gap)",
    [theme.focus.selector]: theme.focus.default,
    "&::before": {
      content: '""',
      display: "block",
      position: "absolute",
      top: "var(--_StepButton-top, 0)",
      right: 0,
      bottom: 0,
      left: "var(--_StepButton-left, 0)"
    }
  };
});
var StepButton = React18.forwardRef(function StepButton2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyStepButton"
  });
  const {
    className,
    component = "button",
    children,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded18);
  const ownerState = _extends({}, props, {
    component
  });
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(stepButtonClasses_default.root, className),
    elementType: StepButtonRoot,
    externalForwardedProps,
    ownerState,
    additionalProps: {
      type: "button"
    }
  });
  return (0, import_jsx_runtime24.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? StepButton.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Used to render icon or text elements inside the StepButton if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types20.default.node,
  /**
   * @ignore
   */
  className: import_prop_types20.default.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types20.default.elementType,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types20.default.shape({
    root: import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types20.default.shape({
    root: import_prop_types20.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object, import_prop_types20.default.bool])), import_prop_types20.default.func, import_prop_types20.default.object])
} : void 0;
var StepButton_default = StepButton;

// node_modules/@mui/joy/StepIndicator/StepIndicator.js
var React19 = __toESM(require_react());
var import_prop_types21 = __toESM(require_prop_types());

// node_modules/@mui/joy/StepIndicator/stepIndicatorClasses.js
function getStepIndicatorUtilityClass(slot) {
  return generateUtilityClass2("MuiStepIndicator", slot);
}
var stepIndicatorClasses = generateUtilityClasses2("MuiStepIndicator", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "horizontal", "vertical"]);
var stepIndicatorClasses_default = stepIndicatorClasses;

// node_modules/@mui/joy/StepIndicator/StepIndicator.js
var import_jsx_runtime25 = __toESM(require_jsx_runtime());
var _excluded19 = ["className", "component", "color", "children", "variant", "slots", "slotProps"];
var useUtilityClasses18 = (ownerState) => {
  const {
    color,
    variant
  } = ownerState;
  const slots = {
    root: ["root", color && `color${capitalize(color)}`, variant && `variant${capitalize(variant)}`]
  };
  return composeClasses(slots, getStepIndicatorUtilityClass, {});
};
var StepIndicatorRoot = styled_default("div", {
  name: "JoyStepIndicator",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants;
  return _extends({
    "--Icon-fontSize": "calc(var(--StepIndicator-size, 2rem) / 2)",
    "--Icon-color": "currentColor",
    boxSizing: "border-box",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    font: "inherit",
    borderRadius: "50%",
    width: "var(--StepIndicator-size, 1.5rem)",
    height: "var(--StepIndicator-size, 1.5rem)"
  }, (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color]);
});
var StepIndicator2 = React19.forwardRef(function StepIndicator3(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyStepIndicator"
  });
  const {
    className,
    component = "div",
    color = "neutral",
    children,
    variant = "soft",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded19);
  const ownerState = _extends({}, props, {
    component,
    color,
    variant
  });
  const classes = useUtilityClasses18(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: StepIndicatorRoot,
    externalForwardedProps,
    ownerState
  });
  return (0, import_jsx_runtime25.jsx)(SlotRoot, _extends({}, rootProps, {
    children
  }));
});
true ? StepIndicator2.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Used to render icon or text elements inside the StepIndicator if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types21.default.node,
  /**
   * @ignore
   */
  className: import_prop_types21.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types21.default.oneOfType([import_prop_types21.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types21.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types21.default.elementType,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types21.default.shape({
    root: import_prop_types21.default.oneOfType([import_prop_types21.default.func, import_prop_types21.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types21.default.shape({
    root: import_prop_types21.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types21.default.oneOfType([import_prop_types21.default.arrayOf(import_prop_types21.default.oneOfType([import_prop_types21.default.func, import_prop_types21.default.object, import_prop_types21.default.bool])), import_prop_types21.default.func, import_prop_types21.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'soft'
   */
  variant: import_prop_types21.default.oneOfType([import_prop_types21.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types21.default.string])
} : void 0;
var StepIndicator_default = StepIndicator2;

// node_modules/@mui/joy/Tab/Tab.js
var React20 = __toESM(require_react());
var import_prop_types22 = __toESM(require_prop_types());

// node_modules/@mui/joy/Tab/tabClasses.js
function getTabUtilityClass(slot) {
  return generateUtilityClass2("MuiTab", slot);
}
var tabListClasses = generateUtilityClasses2("MuiTab", ["root", "disabled", "focusVisible", "selected", "horizontal", "vertical", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var tabClasses_default = tabListClasses;

// node_modules/@mui/joy/Tab/Tab.js
var import_jsx_runtime26 = __toESM(require_jsx_runtime());
var _excluded20 = ["action", "children", "value", "disabled", "onChange", "onClick", "onFocus", "component", "orientation", "variant", "color", "disableIndicator", "indicatorPlacement", "indicatorInset", "slots", "slotProps"];
var useUtilityClasses19 = (ownerState) => {
  const {
    selected,
    disabled,
    focusVisible,
    variant,
    color,
    orientation
  } = ownerState;
  const slots = {
    root: ["root", orientation, disabled && "disabled", focusVisible && "focusVisible", selected && "selected", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`]
  };
  return composeClasses(slots, getTabUtilityClass, {});
};
var TabRoot = styled_default(StyledListItemButton, {
  name: "JoyTab",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  ownerState
}) => [
  {
    flex: "initial",
    justifyContent: ownerState.row ? "center" : "initial",
    "--unstable_ListItemDecorator-alignItems": "center",
    "--unstable_offset": "min(calc(-1 * var(--variant-borderWidth, 0px)), -1px)"
  },
  !ownerState.disableIndicator && {
    '&[aria-selected="true"]': {
      "--Tab-indicatorColor": "currentColor",
      zIndex: 1
      // to stay above other tab elements
    },
    // using pseudo element for showing active indicator is best for controlling the size and customization.
    // for example, developers can customize the radius, width or background.
    // (border and box-shadow are not flexible when it comes to customization).
    "&::after": {
      content: '""',
      display: "block",
      position: "absolute",
      margin: "auto",
      background: "var(--Tab-indicatorColor)",
      borderRadius: "var(--Tab-indicatorRadius)"
    }
  },
  // the padding is to account for the indicator's thickness to make the text proportional.
  !ownerState.disableIndicator && ownerState.indicatorPlacement === "bottom" && {
    paddingBottom: "calc(var(--ListItem-paddingY) - var(--variant-borderWidth, 0px) + var(--Tab-indicatorThickness) - 1px)",
    "&::after": {
      height: "var(--Tab-indicatorThickness)",
      width: "var(--Tab-indicatorSize)",
      left: ownerState.indicatorInset ? "var(--ListItem-paddingLeft)" : "var(--unstable_offset)",
      right: ownerState.indicatorInset ? "var(--ListItem-paddingRight)" : "var(--unstable_offset)",
      bottom: "calc(-1px - var(--unstable_TabList-underlineBottom, 0px))"
    }
  },
  !ownerState.disableIndicator && ownerState.indicatorPlacement === "top" && {
    paddingTop: "calc(var(--ListItem-paddingY) - var(--variant-borderWidth, 0px) + var(--Tab-indicatorThickness) - 1px)",
    "&::after": {
      height: "var(--Tab-indicatorThickness)",
      width: "var(--Tab-indicatorSize)",
      left: ownerState.indicatorInset ? "var(--ListItem-paddingLeft)" : "var(--unstable_offset)",
      right: ownerState.indicatorInset ? "var(--ListItem-paddingRight)" : "var(--unstable_offset)",
      top: "calc(-1px - var(--unstable_TabList-underlineTop, 0px))"
    }
  },
  !ownerState.disableIndicator && ownerState.indicatorPlacement === "right" && {
    paddingRight: "calc(var(--ListItem-paddingRight) + var(--Tab-indicatorThickness) - 1px)",
    "&::after": {
      height: "var(--Tab-indicatorSize)",
      width: "var(--Tab-indicatorThickness)",
      top: ownerState.indicatorInset ? "var(--ListItem-paddingY)" : "var(--unstable_offset)",
      bottom: ownerState.indicatorInset ? "var(--ListItem-paddingY)" : "var(--unstable_offset)",
      right: "calc(-1px - var(--unstable_TabList-underlineRight, 0px))"
    }
  },
  !ownerState.disableIndicator && ownerState.indicatorPlacement === "left" && {
    paddingLeft: "calc(var(--ListItem-paddingLeft) + var(--Tab-indicatorThickness) - 1px)",
    "&::after": {
      height: "var(--Tab-indicatorSize)",
      width: "var(--Tab-indicatorThickness)",
      top: ownerState.indicatorInset ? "var(--ListItem-paddingY)" : "var(--unstable_offset)",
      bottom: ownerState.indicatorInset ? "var(--ListItem-paddingY)" : "var(--unstable_offset)",
      left: "calc(-1px - var(--unstable_TabList-underlineLeft, 0px))"
    }
  }
]);
var Tab = React20.forwardRef(function Tab2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyTab"
  });
  const row = React20.useContext(RowListContext_default);
  const {
    action,
    children,
    disabled = false,
    component = "button",
    orientation = "horizontal",
    variant = "plain",
    color = "neutral",
    disableIndicator = false,
    indicatorPlacement = row ? "bottom" : "right",
    indicatorInset = false,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded20);
  const tabRef = React20.useRef(null);
  const handleRef = useForkRef(tabRef, ref);
  const {
    active,
    focusVisible,
    setFocusVisible,
    selected,
    getRootProps
  } = useTab(_extends({}, props, {
    rootRef: handleRef
  }));
  React20.useImperativeHandle(action, () => ({
    focusVisible: () => {
      setFocusVisible(true);
      tabRef.current.focus();
    }
  }), [setFocusVisible]);
  const ownerState = _extends({}, props, {
    disableIndicator,
    indicatorPlacement,
    indicatorInset,
    orientation,
    row,
    active,
    focusVisible,
    disabled,
    selected,
    variant,
    color
  });
  const classes = useUtilityClasses19(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    elementType: TabRoot,
    getSlotProps: getRootProps,
    externalForwardedProps,
    ownerState,
    className: classes.root
  });
  return (0, import_jsx_runtime26.jsx)(ListItemButtonOrientationContext_default.Provider, {
    value: orientation,
    children: (0, import_jsx_runtime26.jsx)(SlotRoot, _extends({}, rootProps, {
      children
    }))
  });
});
true ? Tab.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * A ref for imperative actions. It currently only supports `focusVisible()` action.
   */
  action: import_prop_types22.default.oneOfType([import_prop_types22.default.func, import_prop_types22.default.shape({
    current: import_prop_types22.default.shape({
      focusVisible: import_prop_types22.default.func.isRequired
    })
  })]),
  /**
   * @ignore
   */
  children: import_prop_types22.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types22.default.oneOfType([import_prop_types22.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types22.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types22.default.elementType,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: import_prop_types22.default.bool,
  /**
   * If `true`, the pseudo element indicator is hidden.
   * @default false
   */
  disableIndicator: import_prop_types22.default.bool,
  /**
   * If `true`, the indicator stay within the padding based on the `Tabs` orientation.
   * @default false
   */
  indicatorInset: import_prop_types22.default.bool,
  /**
   * The indicator's position when the Tab is selected.
   * @default row ? 'bottom' : 'right'
   */
  indicatorPlacement: import_prop_types22.default.oneOf(["bottom", "left", "right", "top"]),
  /**
   * Callback invoked when new value is being set.
   */
  onChange: import_prop_types22.default.func,
  /**
   * @ignore
   */
  onClick: import_prop_types22.default.func,
  /**
   * @ignore
   */
  onFocus: import_prop_types22.default.func,
  /**
   * The content direction flow.
   * @default 'horizontal'
   */
  orientation: import_prop_types22.default.oneOf(["horizontal", "vertical"]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types22.default.shape({
    root: import_prop_types22.default.oneOfType([import_prop_types22.default.func, import_prop_types22.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types22.default.shape({
    root: import_prop_types22.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types22.default.oneOfType([import_prop_types22.default.arrayOf(import_prop_types22.default.oneOfType([import_prop_types22.default.func, import_prop_types22.default.object, import_prop_types22.default.bool])), import_prop_types22.default.func, import_prop_types22.default.object]),
  /**
   * You can provide your own value. Otherwise, it falls back to the child position index.
   */
  value: import_prop_types22.default.oneOfType([import_prop_types22.default.number, import_prop_types22.default.string]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types22.default.oneOfType([import_prop_types22.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types22.default.string])
} : void 0;
var Tab_default = Tab;

// node_modules/@mui/joy/TabList/TabList.js
var React22 = __toESM(require_react());
var import_prop_types23 = __toESM(require_prop_types());

// node_modules/@mui/joy/Tabs/SizeTabsContext.js
var React21 = __toESM(require_react());
var SizeTabsContext = React21.createContext("md");
if (true) {
  SizeTabsContext.displayName = "SizeTabsContext";
}
var SizeTabsContext_default = SizeTabsContext;

// node_modules/@mui/joy/TabList/tabListClasses.js
function getTabListUtilityClass(slot) {
  return generateUtilityClass2("MuiTabList", slot);
}
var tabListClasses2 = generateUtilityClasses2("MuiTabList", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "sizeSm", "sizeMd", "sizeLg"]);
var tabListClasses_default = tabListClasses2;

// node_modules/@mui/joy/TabList/TabList.js
var import_jsx_runtime27 = __toESM(require_jsx_runtime());
var _excluded21 = ["component", "children", "variant", "color", "size", "disableUnderline", "underlinePlacement", "tabFlex", "sticky", "slots", "slotProps"];
var useUtilityClasses20 = (ownerState) => {
  const {
    orientation,
    size,
    variant,
    color
  } = ownerState;
  const slots = {
    root: ["root", orientation, variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`]
  };
  return composeClasses(slots, getTabListUtilityClass, {});
};
var TabListRoot = styled_default(StyledList, {
  name: "JoyTabList",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants;
  const variantStyle = (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color];
  return _extends({
    "--List-gap": "0px",
    "--ListDivider-gap": "0px",
    "--ListItem-paddingX": "var(--Tabs-spacing)",
    "--ListItem-gap": "0.375rem",
    // the `var(--unknown,)` is a workaround because emotion does not support space toggle.
    "--unstable_TabList-hasUnderline": ownerState.disableUnderline ? "var(--unknown,)" : "initial"
  }, scopedVariables, {
    flexGrow: "initial",
    flexDirection: ownerState.orientation === "vertical" ? "column" : "row",
    borderRadius: `var(--List-radius, 0px)`,
    padding: `var(--List-padding, 0px)`,
    zIndex: 1
  }, ownerState.sticky && {
    // sticky in list item can be found in grouped options
    position: "sticky",
    top: ownerState.sticky === "top" ? "calc(-1 * var(--Tabs-padding, 0px))" : "initial",
    bottom: ownerState.sticky === "bottom" ? "calc(-1 * var(--Tabs-padding, 0px))" : "initial",
    backgroundColor: (variantStyle == null ? void 0 : variantStyle.backgroundColor) || `var(--TabList-stickyBackground, ${theme.vars.palette.background.body})`
  }, !ownerState.disableUnderline && _extends({}, ownerState.underlinePlacement === "bottom" && {
    "--unstable_TabList-underlineBottom": "1px",
    paddingBottom: 1,
    boxShadow: `inset 0 -1px ${theme.vars.palette.divider}`
  }, ownerState.underlinePlacement === "top" && {
    "--unstable_TabList-underlineTop": "1px",
    paddingTop: 1,
    boxShadow: `inset 0 1px ${theme.vars.palette.divider}`
  }, ownerState.underlinePlacement === "right" && {
    "--unstable_TabList-underlineRight": "1px",
    paddingRight: 1,
    boxShadow: `inset -1px 0 ${theme.vars.palette.divider}`
  }, ownerState.underlinePlacement === "left" && {
    "--unstable_TabList-underlineLeft": "1px",
    paddingLeft: 1,
    boxShadow: `inset 1px 0 ${theme.vars.palette.divider}`
  }), ownerState.tabFlex && {
    [`& .${tabClasses_default.root}`]: {
      flex: ownerState.tabFlex
    }
  });
});
var TabList = React22.forwardRef(function TabList2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyTabList"
  });
  const tabsSize = React22.useContext(SizeTabsContext_default);
  const {
    isRtl,
    orientation,
    getRootProps,
    contextValue
  } = useTabsList({
    rootRef: ref
  });
  const {
    component = "div",
    children,
    variant = "plain",
    color = "neutral",
    size: sizeProp,
    disableUnderline = false,
    underlinePlacement = orientation === "horizontal" ? "bottom" : "right",
    tabFlex,
    sticky,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded21);
  const size = sizeProp != null ? sizeProp : tabsSize;
  const ownerState = _extends({}, props, {
    isRtl,
    orientation,
    variant,
    color,
    size,
    sticky,
    tabFlex,
    nesting: false,
    disableUnderline,
    underlinePlacement
  });
  const classes = useUtilityClasses20(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    elementType: TabListRoot,
    getSlotProps: getRootProps,
    externalForwardedProps,
    ownerState,
    className: classes.root
  });
  return (
    // @ts-ignore conflicted ref types
    (0, import_jsx_runtime27.jsx)(SlotRoot, _extends({}, rootProps, {
      children: (0, import_jsx_runtime27.jsx)(TabsListProvider, {
        value: contextValue,
        children: (0, import_jsx_runtime27.jsx)(ListProvider_default, {
          row: orientation === "horizontal",
          nested: true,
          children
        })
      })
    }))
  );
});
true ? TabList.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Used to render icon or text elements inside the TabList if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types23.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types23.default.oneOfType([import_prop_types23.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types23.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types23.default.elementType,
  /**
   * If `true`, the TabList's underline will disappear.
   * @default false
   */
  disableUnderline: import_prop_types23.default.bool,
  /**
   * The size of the component.
   */
  size: import_prop_types23.default.oneOfType([import_prop_types23.default.oneOf(["sm", "md", "lg"]), import_prop_types23.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types23.default.shape({
    root: import_prop_types23.default.oneOfType([import_prop_types23.default.func, import_prop_types23.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types23.default.shape({
    root: import_prop_types23.default.elementType
  }),
  /**
   * If provided, the TabList will have postion `sticky`.
   */
  sticky: import_prop_types23.default.oneOf(["bottom", "top"]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types23.default.oneOfType([import_prop_types23.default.arrayOf(import_prop_types23.default.oneOfType([import_prop_types23.default.func, import_prop_types23.default.object, import_prop_types23.default.bool])), import_prop_types23.default.func, import_prop_types23.default.object]),
  /**
   * The flex value of the Tab.
   * @example tabFlex={1} will set flex: '1 1 auto' on each tab (stretch the tab to equally fill the available space).
   */
  tabFlex: import_prop_types23.default.oneOfType([import_prop_types23.default.number, import_prop_types23.default.string]),
  /**
   * The placement of the TabList's underline.
   * @default orientation === 'horizontal' ? 'bottom' : 'right'
   */
  underlinePlacement: import_prop_types23.default.oneOf(["bottom", "left", "right", "top"]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types23.default.oneOfType([import_prop_types23.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types23.default.string])
} : void 0;
var TabList_default = TabList;

// node_modules/@mui/joy/TabPanel/TabPanel.js
var React23 = __toESM(require_react());
var import_prop_types24 = __toESM(require_prop_types());

// node_modules/@mui/joy/TabPanel/tabPanelClasses.js
function getTabPanelUtilityClass(slot) {
  return generateUtilityClass2("MuiTabPanel", slot);
}
var tabListClasses3 = generateUtilityClasses2("MuiTabPanel", ["root", "hidden", "sizeSm", "sizeMd", "sizeLg", "horizontal", "vertical", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);
var tabPanelClasses_default = tabListClasses3;

// node_modules/@mui/joy/TabPanel/TabPanel.js
var import_jsx_runtime28 = __toESM(require_jsx_runtime());
var _excluded22 = ["children", "value", "component", "color", "variant", "size", "slots", "slotProps", "keepMounted"];
var useUtilityClasses21 = (ownerState) => {
  const {
    hidden,
    size,
    variant,
    color,
    orientation
  } = ownerState;
  const slots = {
    root: ["root", hidden && "hidden", size && `size${capitalize(size)}`, orientation, variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`]
  };
  return composeClasses(slots, getTabPanelUtilityClass, {});
};
var TabPanelRoot = styled_default("div", {
  name: "JoyTabPanel",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants;
  return _extends({
    display: ownerState.hidden ? "none" : "block",
    padding: "var(--Tabs-spacing)",
    flexGrow: 1,
    fontFamily: theme.vars.fontFamily.body
  }, theme.typography[`body-${ownerState.size}`], (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color]);
});
var TabPanel = React23.forwardRef(function TabPanel2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyTabPanel"
  });
  const {
    orientation
  } = useTabsContext() || {
    orientation: "horizontal"
  };
  const tabsSize = React23.useContext(SizeTabsContext_default);
  const {
    children,
    value = 0,
    component,
    color = "neutral",
    variant = "plain",
    size: sizeProp,
    slots = {},
    slotProps = {},
    keepMounted = false
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded22);
  const {
    hidden,
    getRootProps
  } = useTabPanel(_extends({}, props, {
    value
  }));
  const size = sizeProp != null ? sizeProp : tabsSize;
  const ownerState = _extends({}, props, {
    orientation,
    hidden,
    size,
    color,
    variant
  });
  const classes = useUtilityClasses21(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    elementType: TabPanelRoot,
    getSlotProps: getRootProps,
    externalForwardedProps,
    additionalProps: {
      role: "tabpanel",
      ref,
      as: component
    },
    ownerState,
    className: classes.root
  });
  if (keepMounted) {
    return (0, import_jsx_runtime28.jsx)(SlotRoot, _extends({}, rootProps, {
      children
    }));
  }
  return (0, import_jsx_runtime28.jsx)(SlotRoot, _extends({}, rootProps, {
    children: !hidden && children
  }));
});
true ? TabPanel.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types24.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types24.default.oneOfType([import_prop_types24.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types24.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types24.default.elementType,
  /**
   * Always keep the children in the DOM.
   * @default false
   */
  keepMounted: import_prop_types24.default.bool,
  /**
   * The size of the component.
   */
  size: import_prop_types24.default.oneOfType([import_prop_types24.default.oneOf(["sm", "md", "lg"]), import_prop_types24.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types24.default.shape({
    root: import_prop_types24.default.oneOfType([import_prop_types24.default.func, import_prop_types24.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types24.default.shape({
    root: import_prop_types24.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types24.default.oneOfType([import_prop_types24.default.arrayOf(import_prop_types24.default.oneOfType([import_prop_types24.default.func, import_prop_types24.default.object, import_prop_types24.default.bool])), import_prop_types24.default.func, import_prop_types24.default.object]),
  /**
   * The value of the TabPanel. It will be shown when the Tab with the corresponding value is selected.
   * @default 0
   */
  value: import_prop_types24.default.oneOfType([import_prop_types24.default.number, import_prop_types24.default.string]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types24.default.oneOfType([import_prop_types24.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types24.default.string])
} : void 0;
var TabPanel_default = TabPanel;

// node_modules/@mui/joy/Tabs/Tabs.js
var React24 = __toESM(require_react());
var import_prop_types25 = __toESM(require_prop_types());

// node_modules/@mui/joy/Tabs/tabsClasses.js
function getTabsUtilityClass(slot) {
  return generateUtilityClass2("MuiTabs", slot);
}
var tabListClasses4 = generateUtilityClasses2("MuiTabs", ["root", "horizontal", "vertical", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "sizeSm", "sizeMd", "sizeLg"]);
var tabsClasses_default = tabListClasses4;

// node_modules/@mui/joy/Tabs/Tabs.js
var import_jsx_runtime29 = __toESM(require_jsx_runtime());
var _excluded23 = ["children", "value", "defaultValue", "orientation", "direction", "component", "onChange", "selectionFollowsFocus", "variant", "color", "size", "slots", "slotProps"];
var useUtilityClasses22 = (ownerState) => {
  const {
    orientation,
    variant,
    color,
    size
  } = ownerState;
  const slots = {
    root: ["root", orientation, variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`]
  };
  return composeClasses(slots, getTabsUtilityClass, {});
};
var TabsRoot = styled_default("div", {
  name: "JoyTabs",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  ownerState,
  theme
}) => {
  var _theme$variants, _theme$variants2;
  const variantStyle = (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color];
  const {
    bgcolor,
    backgroundColor,
    background,
    p,
    padding
  } = resolveSxValue({
    theme,
    ownerState
  }, ["bgcolor", "backgroundColor", "background", "p", "padding"]);
  const resolvedBg = getPath(theme, `palette.${bgcolor}`) || bgcolor || getPath(theme, `palette.${backgroundColor}`) || backgroundColor || background || (variantStyle == null ? void 0 : variantStyle.backgroundColor) || (variantStyle == null ? void 0 : variantStyle.background) || theme.vars.palette.background.surface;
  return _extends({}, ownerState.size === "sm" && {
    "--Tabs-spacing": "0.75rem"
  }, ownerState.size === "md" && {
    "--Tabs-spacing": "1rem"
  }, ownerState.size === "lg" && {
    "--Tabs-spacing": "1.25rem"
  }, {
    "--Tab-indicatorThickness": "2px",
    "--Icon-color": ownerState.color !== "neutral" || ownerState.variant === "solid" ? "currentColor" : theme.vars.palette.text.icon,
    "--TabList-stickyBackground": resolvedBg === "transparent" ? "initial" : resolvedBg,
    // for sticky TabList
    display: "flex",
    flexDirection: "column"
  }, ownerState.orientation === "vertical" && {
    flexDirection: "row"
  }, {
    backgroundColor: theme.vars.palette.background.surface,
    position: "relative"
  }, theme.typography[`body-${ownerState.size}`], (_theme$variants2 = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants2[ownerState.color], p !== void 0 && {
    "--Tabs-padding": p
  }, padding !== void 0 && {
    "--Tabs-padding": padding
  });
});
var Tabs = React24.forwardRef(function Tabs2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyTabs"
  });
  const {
    children,
    value: valueProp,
    defaultValue: defaultValueProp,
    orientation = "horizontal",
    direction = "ltr",
    component,
    variant = "plain",
    color = "neutral",
    size = "md",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded23);
  const defaultValue = defaultValueProp || (valueProp === void 0 ? 0 : void 0);
  const {
    contextValue
  } = useTabs(_extends({}, props, {
    orientation,
    defaultValue
  }));
  const ownerState = _extends({}, props, {
    orientation,
    direction,
    variant,
    color,
    size
  });
  const classes = useUtilityClasses22(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    elementType: TabsRoot,
    externalForwardedProps,
    additionalProps: {
      ref,
      as: component
    },
    ownerState,
    className: classes.root
  });
  return (
    // @ts-ignore `defaultValue` between HTMLDiv and TabsProps is conflicted.
    (0, import_jsx_runtime29.jsx)(SlotRoot, _extends({}, rootProps, {
      children: (0, import_jsx_runtime29.jsx)(TabsProvider, {
        value: contextValue,
        children: (0, import_jsx_runtime29.jsx)(SizeTabsContext_default.Provider, {
          value: size,
          children
        })
      })
    }))
  );
});
true ? Tabs.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: import_prop_types25.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types25.default.oneOfType([import_prop_types25.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types25.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types25.default.elementType,
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: import_prop_types25.default.oneOfType([import_prop_types25.default.number, import_prop_types25.default.string]),
  /**
   * The direction of the text.
   * @default 'ltr'
   */
  direction: import_prop_types25.default.oneOf(["ltr", "rtl"]),
  /**
   * Callback invoked when new value is being set.
   */
  onChange: import_prop_types25.default.func,
  /**
   * The component orientation (layout flow direction).
   * @default 'horizontal'
   */
  orientation: import_prop_types25.default.oneOf(["horizontal", "vertical"]),
  /**
   * If `true` the selected tab changes on focus. Otherwise it only
   * changes on activation.
   */
  selectionFollowsFocus: import_prop_types25.default.bool,
  /**
   * The size of the component.
   * @default 'md'
   */
  size: import_prop_types25.default.oneOfType([import_prop_types25.default.oneOf(["sm", "md", "lg"]), import_prop_types25.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types25.default.shape({
    root: import_prop_types25.default.oneOfType([import_prop_types25.default.func, import_prop_types25.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types25.default.shape({
    root: import_prop_types25.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types25.default.oneOfType([import_prop_types25.default.arrayOf(import_prop_types25.default.oneOfType([import_prop_types25.default.func, import_prop_types25.default.object, import_prop_types25.default.bool])), import_prop_types25.default.func, import_prop_types25.default.object]),
  /**
   * The value of the currently selected `Tab`.
   * If you don't want any selected `Tab`, you can set this prop to `null`.
   */
  value: import_prop_types25.default.oneOfType([import_prop_types25.default.number, import_prop_types25.default.string]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types25.default.oneOfType([import_prop_types25.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types25.default.string])
} : void 0;
var Tabs_default = Tabs;

// node_modules/@mui/joy/TextField/TextField.js
var TextField_default = function DeletedTextField() {
  throw new Error(["MUI: `TextField` component has been removed in favor of Input composition.", "", "To migrate, run `npx @mui/codemod@latest v5.0.0/joy-text-field-to-input <path>`.", "For the codemod detail, visit https://github.com/mui/material-ui/blob/master/packages/mui-codemod/README.md#joy-text-field-to-input\n\nTo learn more why it has been removed, visit the RFC https://github.com/mui/material-ui/issues/34176"].join("\n"));
};

// node_modules/@mui/joy/ToggleButtonGroup/ToggleButtonGroup.js
var React25 = __toESM(require_react());
var import_prop_types26 = __toESM(require_prop_types());

// node_modules/@mui/joy/ToggleButtonGroup/toggleButtonGroupClasses.js
function getToggleButtonGroupUtilityClass(slot) {
  return generateUtilityClass2("MuiToggleButtonGroup", slot);
}
var toggleButtonGroupClasses = generateUtilityClasses2("MuiToggleButtonGroup", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "sizeSm", "sizeMd", "sizeLg", "horizontal", "vertical"]);
var toggleButtonGroupClasses_default = toggleButtonGroupClasses;

// node_modules/@mui/joy/ToggleButtonGroup/ToggleButtonGroup.js
var import_jsx_runtime30 = __toESM(require_jsx_runtime());
var _excluded24 = ["buttonFlex", "className", "component", "disabled", "size", "color", "variant", "children", "onChange", "orientation", "slots", "slotProps", "spacing", "value"];
var useUtilityClasses23 = (ownerState) => {
  const {
    size,
    variant,
    color,
    orientation
  } = ownerState;
  const slots = {
    root: ["root", orientation, variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`]
  };
  return composeClasses(slots, getToggleButtonGroupUtilityClass, {});
};
var ToggleButtonGroupRoot = styled_default(StyledButtonGroup, {
  name: "JoyToggleButtonGroup",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})({});
var ToggleButtonGroup = React25.forwardRef(function ToggleButtonGroup2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyToggleButtonGroup"
  });
  const {
    buttonFlex,
    className,
    component = "div",
    disabled = false,
    size = "md",
    color = "neutral",
    variant = "outlined",
    children,
    onChange,
    orientation = "horizontal",
    slots = {},
    slotProps = {},
    spacing = 0,
    value
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded24);
  const ownerState = _extends({}, props, {
    buttonFlex,
    color,
    component,
    orientation,
    spacing,
    size,
    variant
  });
  const classes = useUtilityClasses23(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: ToggleButtonGroupRoot,
    externalForwardedProps,
    ownerState,
    additionalProps: {
      role: "group"
    }
  });
  const buttonGroupContext = React25.useMemo(() => ({
    variant,
    color,
    size,
    disabled
  }), [variant, color, size, disabled]);
  const handleChange = React25.useCallback((event, buttonValue) => {
    if (!onChange || buttonValue === void 0) {
      return;
    }
    if (Array.isArray(value)) {
      const set = new Set(value);
      if (set.has(buttonValue)) {
        set.delete(buttonValue);
      } else {
        set.add(buttonValue);
      }
      onChange(event, Array.from(set));
    } else {
      onChange(event, value === buttonValue ? null : buttonValue);
    }
  }, [value, onChange]);
  const toggleButtonGroupContext = React25.useMemo(() => ({
    onClick: (event, childValue) => {
      if (!event.defaultPrevented) {
        handleChange(event, childValue);
      }
    },
    value
  }), [handleChange, value]);
  return (0, import_jsx_runtime30.jsx)(SlotRoot, _extends({}, rootProps, {
    children: (0, import_jsx_runtime30.jsx)(ToggleButtonGroupContext_default.Provider, {
      value: toggleButtonGroupContext,
      children: (0, import_jsx_runtime30.jsx)(ButtonGroupContext_default.Provider, {
        value: buttonGroupContext,
        children: React25.Children.map(children, (child, index) => {
          if (!React25.isValidElement(child)) {
            return child;
          }
          const extraProps = {};
          if (isMuiElement(child, ["Divider"])) {
            var _childProps$inset, _childProps$orientati;
            const childProps = child.props;
            extraProps.inset = (_childProps$inset = childProps == null ? void 0 : childProps.inset) != null ? _childProps$inset : "context";
            const dividerOrientation = orientation === "vertical" ? "horizontal" : "vertical";
            extraProps.orientation = (_childProps$orientati = childProps == null ? void 0 : childProps.orientation) != null ? _childProps$orientati : dividerOrientation;
            extraProps.role = "presentation";
            extraProps.component = "span";
          }
          if (index === 0) {
            extraProps["data-first-child"] = "";
          }
          if (index === React25.Children.count(children) - 1) {
            extraProps["data-last-child"] = "";
          }
          return React25.cloneElement(child, extraProps);
        })
      })
    })
  }));
});
true ? ToggleButtonGroup.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The flex value of the button.
   * @example buttonFlex={1} will set flex: '1 1 auto' on each button (stretch the button to equally fill the available space).
   */
  buttonFlex: import_prop_types26.default.oneOfType([import_prop_types26.default.number, import_prop_types26.default.string]),
  /**
   * Used to render icon or text elements inside the ButtonGroup if `src` is not set.
   * This can be an element, or just a string.
   */
  children: import_prop_types26.default.node,
  /**
   * @ignore
   */
  className: import_prop_types26.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["danger", "info", "neutral", "primary", "success", "warning"]), import_prop_types26.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types26.default.elementType,
  /**
   * If `true`, all the buttons will be disabled.
   * @default false
   */
  disabled: import_prop_types26.default.bool,
  /**
   * Callback fired when the value changes.
   *
   * @param {React.MouseEvent<HTMLElement>} event The event source of the callback.
   * @param {any} value of the selected buttons. When `exclusive` is true
   * this is a single value; when false an array of selected values. If no value
   * is selected and `exclusive` is true the value is null; when false an empty array.
   */
  onChange: import_prop_types26.default.func,
  /**
   * The component orientation.
   * @default 'horizontal'
   */
  orientation: import_prop_types26.default.oneOf(["horizontal", "vertical"]),
  /**
   * The size of the component.
   * It accepts theme values between 'sm' and 'lg'.
   * @default 'md'
   */
  size: import_prop_types26.default.oneOf(["sm", "md", "lg"]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types26.default.shape({
    root: import_prop_types26.default.oneOfType([import_prop_types26.default.func, import_prop_types26.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types26.default.shape({
    root: import_prop_types26.default.elementType
  }),
  /**
   * Defines the space between the type `item` components.
   * It can only be used on a type `container` component.
   * @default 0
   */
  spacing: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.number, import_prop_types26.default.string])), import_prop_types26.default.number, import_prop_types26.default.shape({
    lg: import_prop_types26.default.oneOfType([import_prop_types26.default.number, import_prop_types26.default.string]),
    md: import_prop_types26.default.oneOfType([import_prop_types26.default.number, import_prop_types26.default.string]),
    sm: import_prop_types26.default.oneOfType([import_prop_types26.default.number, import_prop_types26.default.string]),
    xl: import_prop_types26.default.oneOfType([import_prop_types26.default.number, import_prop_types26.default.string]),
    xs: import_prop_types26.default.oneOfType([import_prop_types26.default.number, import_prop_types26.default.string])
  }), import_prop_types26.default.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.oneOfType([import_prop_types26.default.func, import_prop_types26.default.object, import_prop_types26.default.bool])), import_prop_types26.default.func, import_prop_types26.default.object]),
  /**
   * The currently selected value within the group or an array of selected values.
   *
   * The value must have reference equality with the option in order to be selected.
   */
  value: import_prop_types26.default.oneOfType([import_prop_types26.default.arrayOf(import_prop_types26.default.string), import_prop_types26.default.string]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'outlined'
   */
  variant: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types26.default.string])
} : void 0;
var ToggleButtonGroup_default = ToggleButtonGroup;
export {
  Accordion_default as Accordion,
  AccordionDetails_default as AccordionDetails,
  AccordionGroup_default as AccordionGroup,
  AccordionSummary_default as AccordionSummary,
  Alert_default as Alert,
  AspectRatio_default as AspectRatio,
  Autocomplete_default as Autocomplete,
  AutocompleteListbox_default as AutocompleteListbox,
  AutocompleteOption_default as AutocompleteOption,
  Avatar_default as Avatar,
  AvatarGroup_default as AvatarGroup,
  Badge_default as Badge,
  Box_default as Box,
  Breadcrumbs_default as Breadcrumbs,
  Button_default as Button,
  ButtonGroup_default as ButtonGroup,
  Card_default as Card,
  CardActions_default as CardActions,
  CardContent_default as CardContent,
  CardCover_default as CardCover,
  CardOverflow_default as CardOverflow,
  Checkbox_default as Checkbox,
  Chip_default as Chip,
  ChipDelete_default as ChipDelete,
  CircularProgress_default as CircularProgress,
  Container_default as Container,
  CssBaseline_default as CssBaseline,
  CssVarsProvider,
  DialogActions_default as DialogActions,
  DialogContent_default as DialogContent,
  DialogTitle_default as DialogTitle,
  Divider_default as Divider,
  Drawer_default as Drawer,
  Dropdown,
  FormControl_default as FormControl,
  FormHelperText_default as FormHelperText,
  FormLabel_default as FormLabel,
  GlobalStyles_default as GlobalStyles,
  Grid_default as Grid,
  IconButton_default as IconButton,
  Input_default as Input,
  LinearProgress_default as LinearProgress,
  Link_default as Link,
  List_default as List,
  ListDivider_default as ListDivider,
  ListItem_default as ListItem,
  ListItemButton_default as ListItemButton,
  ListItemContent_default as ListItemContent,
  ListItemDecorator_default as ListItemDecorator,
  ListSubheader_default as ListSubheader,
  Menu_default as Menu,
  MenuButton_default as MenuButton,
  MenuItem_default as MenuItem,
  MenuList_default as MenuList,
  Modal_default as Modal,
  ModalClose_default as ModalClose,
  ModalDialog_default as ModalDialog,
  ModalOverflow_default as ModalOverflow,
  Option_default as Option,
  Radio_default as Radio,
  RadioGroup_default as RadioGroup,
  ScopedCssBaseline_default as ScopedCssBaseline,
  Select_default as Select,
  Sheet_default as Sheet,
  Skeleton_default as Skeleton,
  Slider_default as Slider,
  Snackbar_default as Snackbar,
  Stack_default as Stack,
  Step_default as Step,
  StepButton_default as StepButton,
  StepIndicator_default as StepIndicator,
  Stepper_default as Stepper,
  StyledEngineProvider,
  SvgIcon_default as SvgIcon,
  Switch_default as Switch,
  identifier_default as THEME_ID,
  Tab_default as Tab,
  TabList_default as TabList,
  TabPanel_default as TabPanel,
  Table_default as Table,
  Tabs_default as Tabs,
  TextField_default as TextField,
  Textarea_default as Textarea,
  ThemeProvider,
  ToggleButtonGroup_default as ToggleButtonGroup,
  Tooltip_default as Tooltip,
  Typography_default as Typography,
  accordionClasses_default as accordionClasses,
  accordionDetailsClasses_default as accordionDetailsClasses,
  accordionGroupClasses_default as accordionGroupClasses,
  accordionSummaryClasses_default as accordionSummaryClasses,
  alertClasses_default as alertClasses,
  aspectRatioClasses_default as aspectRatioClasses,
  autocompleteClasses_default as autocompleteClasses,
  autocompleteListboxClasses_default as autocompleteListboxClasses,
  autocompleteOptionClasses_default as autocompleteOptionClasses,
  avatarClasses_default as avatarClasses,
  avatarGroupClasses_default as avatarGroupClasses,
  badgeClasses_default as badgeClasses,
  boxClasses_default as boxClasses,
  breadcrumbsClasses_default as breadcrumbsClasses,
  buttonClasses_default as buttonClasses,
  buttonGroupClasses_default as buttonGroupClasses,
  cardActionsClasses_default as cardActionsClasses,
  cardClasses_default as cardClasses,
  cardContentClasses_default as cardContentClasses,
  cardCoverClasses_default as cardCoverClasses,
  cardOverflowClasses_default as cardOverflowClasses,
  checkboxClasses_default as checkboxClasses,
  chipClasses_default as chipClasses,
  chipDeleteClasses_default as chipDeleteClasses,
  circularProgressClasses_default as circularProgressClasses,
  colors_default as colors,
  containerClasses_default as containerClasses,
  createFilterOptions,
  createGetCssVar,
  dialogActionsClasses_default as dialogActionsClasses,
  dialogContentClasses_default as dialogContentClasses,
  dialogTitleClasses_default as dialogTitleClasses,
  dividerClasses_default as dividerClasses,
  drawerClasses_default as drawerClasses,
  extendTheme,
  formControlClasses_default as formControlClasses,
  formHelperTextClasses_default as formHelperTextClasses,
  formLabelClasses_default as formLabelClasses,
  getAccordionDetailsUtilityClass,
  getAccordionGroupUtilityClass,
  getAccordionSummaryUtilityClass,
  getAccordionUtilityClass,
  getAlertUtilityClass,
  getAspectRatioUtilityClass,
  getAutocompleteListboxUtilityClass,
  getAutocompleteOptionUtilityClass,
  getAutocompleteUtilityClass,
  getAvatarGroupUtilityClass,
  getAvatarUtilityClass,
  getBadgeUtilityClass,
  getBreadcrumbsUtilityClass,
  getButtonGroupUtilityClass,
  getButtonUtilityClass,
  getCardActionsUtilityClass,
  getCardContentUtilityClass,
  getCardCoverUtilityClass,
  getCardOverflowUtilityClass,
  getCardUtilityClass,
  getCheckboxUtilityClass,
  getChipDeleteUtilityClass,
  getChipUtilityClass,
  getCircularProgressUtilityClass,
  getContainerUtilityClass,
  getDialogActionsUtilityClass,
  getDialogContentUtilityClass,
  getDialogTitleUtilityClass,
  getDividerUtilityClass,
  getDrawerUtilityClass,
  getFormControlUtilityClass,
  getFormHelperTextUtilityClass,
  getFormLabelUtilityClass,
  getGridUtilityClass,
  getIconButtonUtilityClass,
  getInitColorSchemeScript,
  getInputUtilityClass,
  getLinearProgressUtilityClass,
  getLinkUtilityClass,
  getListDividerUtilityClass,
  getListItemButtonUtilityClass,
  getListItemContentUtilityClass,
  getListItemDecoratorUtilityClass,
  getListItemUtilityClass,
  getListSubheaderUtilityClass,
  getListUtilityClass,
  getMenuButtonUtilityClass,
  getMenuItemUtilityClass,
  getMenuListUtilityClass,
  getMenuUtilityClass,
  getModalCloseUtilityClass,
  getModalDialogUtilityClass,
  getModalOverflowUtilityClass,
  getModalUtilityClass,
  getOptionUtilityClass,
  getRadioGroupUtilityClass,
  getRadioUtilityClass,
  getScopedCssBaselineUtilityClass,
  getSelectUtilityClass,
  getSheetUtilityClass,
  getSkeletonUtilityClass,
  getSliderUtilityClass,
  getSnackbarUtilityClass,
  getStackUtilityClass,
  getStepButtonUtilityClass,
  getStepIndicatorUtilityClass,
  getStepUtilityClass,
  getStepperUtilityClass,
  getSvgIconUtilityClass,
  getSwitchUtilityClass,
  getTabListUtilityClass,
  getTabPanelUtilityClass,
  getTabUtilityClass,
  getTableUtilityClass,
  getTabsUtilityClass,
  getTextareaUtilityClass,
  getToggleButtonGroupUtilityClass,
  getTooltipUtilityClass,
  getTypographyUtilityClass,
  gridClasses_default as gridClasses,
  iconButtonClasses_default as iconButtonClasses,
  inputClasses_default as inputClasses,
  linearProgressClasses_default as linearProgressClasses,
  linkClasses_default as linkClasses,
  listClasses_default as listClasses,
  listDividerClasses_default as listDividerClasses,
  listItemButtonClasses_default as listItemButtonClasses,
  listItemClasses_default as listItemClasses,
  listItemContentClasses_default as listItemContentClasses,
  listItemDecoratorClasses_default as listItemDecoratorClasses,
  listSubheaderClasses_default as listSubheaderClasses,
  menuButtonClasses_default as menuButtonClasses,
  menuClasses_default as menuClasses,
  menuItemClasses_default as menuItemClasses,
  menuListClasses_default as menuListClasses,
  modalClasses_default as modalClasses,
  modalCloseClasses_default as modalCloseClasses,
  modalDialogClasses_default as modalDialogClasses,
  modalOverflowClasses_default as modalOverflowClasses,
  optionClasses_default as optionClasses,
  radioClasses_default as radioClasses,
  radioGroupClasses_default as radioGroupClasses,
  scopedCssBaselineClasses_default as scopedCssBaselineClasses,
  selectClasses_default as selectClasses,
  sheetClasses_default as sheetClasses,
  shouldSkipGeneratingVar,
  skeletonClasses_default as skeletonClasses,
  sliderClasses_default as sliderClasses,
  snackbarClasses_default as snackbarClasses,
  stackClasses_default as stackClasses,
  stepButtonClasses_default as stepButtonClasses,
  stepClasses_default as stepClasses,
  stepIndicatorClasses_default as stepIndicatorClasses,
  stepperClasses_default as stepperClasses,
  styled_default as styled,
  svgIconClasses_default as svgIconClasses,
  switchClasses_default as switchClasses,
  tabClasses_default as tabClasses,
  tabListClasses_default as tabListClasses,
  tabPanelClasses_default as tabPanelClasses,
  tableClasses_default as tableClasses,
  tabsClasses_default as tabsClasses,
  textareaClasses_default as textareaClasses,
  toggleButtonGroupClasses_default as toggleButtonGroupClasses,
  tooltipClasses_default as tooltipClasses,
  typographyClasses_default as typographyClasses,
  useColorScheme,
  useTheme,
  useThemeProps
};
/*! Bundled license information:

@mui/joy/index.js:
  (**
   * @mui/joy v5.0.0-beta.52
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
//# sourceMappingURL=@mui_joy.js.map
